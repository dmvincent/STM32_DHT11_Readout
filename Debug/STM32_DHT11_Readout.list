
STM32_DHT11_Readout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000328c  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  0800348c  0800348c  0000448c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800354c  0800354c  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  0800354c  0800354c  0000454c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003554  08003554  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003554  08003554  00004554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003558  08003558  00004558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800355c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000360  2000005c  080035b8  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003bc  080035b8  000053bc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bbb8  00000000  00000000  0000508a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015eb  00000000  00000000  00010c42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a50  00000000  00000000  00012230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000819  00000000  00000000  00012c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00032410  00000000  00000000  00013499  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d911  00000000  00000000  000458a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0013dc4c  00000000  00000000  000531ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00190e06  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000312c  00000000  00000000  00190e4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  00193f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000005c 	.word	0x2000005c
 800021c:	00000000 	.word	0x00000000
 8000220:	08003474 	.word	0x08003474

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000060 	.word	0x20000060
 800023c:	08003474 	.word	0x08003474

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <SysTick_Handler>:
 *      Author: daniel
 */

#include "main.h"

void SysTick_Handler(void) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80005e4:	f000 fc26 	bl	8000e34 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80005e8:	f000 fd46 	bl	8001078 <HAL_SYSTICK_IRQHandler>
}
 80005ec:	bf00      	nop
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <main>:
TIM_HandleTypeDef tim6;
TIM_HandleTypeDef tim7;

char msg[100];

int main() {
 80005f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005f2:	b097      	sub	sp, #92	@ 0x5c
 80005f4:	af12      	add	r7, sp, #72	@ 0x48
	// Some user variables
	int segment = 1;
 80005f6:	2301      	movs	r3, #1
 80005f8:	60fb      	str	r3, [r7, #12]
	int bitPosition = 7;
 80005fa:	2307      	movs	r3, #7
 80005fc:	60bb      	str	r3, [r7, #8]
	uint8_t value = 0;
 80005fe:	2300      	movs	r3, #0
 8000600:	71fb      	strb	r3, [r7, #7]
	uint8_t rh, rhDec, temp, tempDec;

	// Initialize HAL
	HAL_Init();
 8000602:	f000 fbda 	bl	8000dba <HAL_Init>

	// Initialize Peripherals
	B_USER_Init();
 8000606:	f000 fa07 	bl	8000a18 <B_USER_Init>
	UART6_Init();
 800060a:	f000 fa2f 	bl	8000a6c <UART6_Init>
	SystemClock_Config();
 800060e:	f000 f9ab 	bl	8000968 <SystemClock_Config>
	TIM6_Init();
 8000612:	f000 fa5f 	bl	8000ad4 <TIM6_Init>
	TIM7_Init();
 8000616:	f000 fa8d 	bl	8000b34 <TIM7_Init>
	DHT11_DATA_Init();
 800061a:	f000 fac1 	bl	8000ba0 <DHT11_DATA_Init>

	// Wait two seconds for DHT11 to stabilize (only one is recommended)
	startTimer(tim6, 3999, 25000);
 800061e:	4ea1      	ldr	r6, [pc, #644]	@ (80008a4 <main+0x2b4>)
 8000620:	f246 13a8 	movw	r3, #25000	@ 0x61a8
 8000624:	9310      	str	r3, [sp, #64]	@ 0x40
 8000626:	f640 739f 	movw	r3, #3999	@ 0xf9f
 800062a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800062c:	466d      	mov	r5, sp
 800062e:	f106 0410 	add.w	r4, r6, #16
 8000632:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000634:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000636:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000638:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800063a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800063c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800063e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000642:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000646:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800064a:	f000 fad7 	bl	8000bfc <startTimer>
	wait(tim6);
 800064e:	4e95      	ldr	r6, [pc, #596]	@ (80008a4 <main+0x2b4>)
 8000650:	466d      	mov	r5, sp
 8000652:	f106 0410 	add.w	r4, r6, #16
 8000656:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000658:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800065a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800065c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800065e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000660:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000662:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000666:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800066a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800066e:	f000 fae4 	bl	8000c3a <wait>
	resetTimer(tim6);
 8000672:	4e8c      	ldr	r6, [pc, #560]	@ (80008a4 <main+0x2b4>)
 8000674:	466d      	mov	r5, sp
 8000676:	f106 0410 	add.w	r4, r6, #16
 800067a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800067c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800067e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000680:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000682:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000684:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000686:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800068a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800068e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000692:	f000 fae7 	bl	8000c64 <resetTimer>

	/*
	 * Initialization is done. Print some type of welcome message
	 */

	memset(msg, 0, strlen(msg));
 8000696:	4884      	ldr	r0, [pc, #528]	@ (80008a8 <main+0x2b8>)
 8000698:	f7ff fdd2 	bl	8000240 <strlen>
 800069c:	4603      	mov	r3, r0
 800069e:	461a      	mov	r2, r3
 80006a0:	2100      	movs	r1, #0
 80006a2:	4881      	ldr	r0, [pc, #516]	@ (80008a8 <main+0x2b8>)
 80006a4:	f002 fa5e 	bl	8002b64 <memset>
	sprintf((char*)msg, "\nEnvironmental System Monitor\n================================\n");
 80006a8:	4980      	ldr	r1, [pc, #512]	@ (80008ac <main+0x2bc>)
 80006aa:	487f      	ldr	r0, [pc, #508]	@ (80008a8 <main+0x2b8>)
 80006ac:	f002 fa3a 	bl	8002b24 <siprintf>
	HAL_UART_Transmit(&huart6, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80006b0:	487d      	ldr	r0, [pc, #500]	@ (80008a8 <main+0x2b8>)
 80006b2:	f7ff fdc5 	bl	8000240 <strlen>
 80006b6:	4603      	mov	r3, r0
 80006b8:	b29a      	uxth	r2, r3
 80006ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006be:	497a      	ldr	r1, [pc, #488]	@ (80008a8 <main+0x2b8>)
 80006c0:	487b      	ldr	r0, [pc, #492]	@ (80008b0 <main+0x2c0>)
 80006c2:	f001 fd25 	bl	8002110 <HAL_UART_Transmit>


	// Send request to DHT11 to send back RH & T by holding DATA down for 18ms
	HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_4, GPIO_PIN_RESET);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2110      	movs	r1, #16
 80006ca:	487a      	ldr	r0, [pc, #488]	@ (80008b4 <main+0x2c4>)
 80006cc:	f000 fea6 	bl	800141c <HAL_GPIO_WritePin>
	startTimer(tim6, 3999, 300);
 80006d0:	4e74      	ldr	r6, [pc, #464]	@ (80008a4 <main+0x2b4>)
 80006d2:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80006d6:	9310      	str	r3, [sp, #64]	@ 0x40
 80006d8:	f640 739f 	movw	r3, #3999	@ 0xf9f
 80006dc:	930f      	str	r3, [sp, #60]	@ 0x3c
 80006de:	466d      	mov	r5, sp
 80006e0:	f106 0410 	add.w	r4, r6, #16
 80006e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006f0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80006f4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80006f8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80006fc:	f000 fa7e 	bl	8000bfc <startTimer>
	wait(tim6);
 8000700:	4e68      	ldr	r6, [pc, #416]	@ (80008a4 <main+0x2b4>)
 8000702:	466d      	mov	r5, sp
 8000704:	f106 0410 	add.w	r4, r6, #16
 8000708:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800070a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800070c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800070e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000710:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000712:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000714:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000718:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800071c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000720:	f000 fa8b 	bl	8000c3a <wait>
	resetTimer(tim6);
 8000724:	4e5f      	ldr	r6, [pc, #380]	@ (80008a4 <main+0x2b4>)
 8000726:	466d      	mov	r5, sp
 8000728:	f106 0410 	add.w	r4, r6, #16
 800072c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800072e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000730:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000732:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000734:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000736:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000738:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800073c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000740:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000744:	f000 fa8e 	bl	8000c64 <resetTimer>

	// Pull DATA line up,switch it to GPIO Input Mode, and wait for response from DHT11
	HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_4,GPIO_PIN_SET);
 8000748:	2201      	movs	r2, #1
 800074a:	2110      	movs	r1, #16
 800074c:	4859      	ldr	r0, [pc, #356]	@ (80008b4 <main+0x2c4>)
 800074e:	f000 fe65 	bl	800141c <HAL_GPIO_WritePin>
	dataInit.Mode = GPIO_MODE_INPUT;
 8000752:	4b59      	ldr	r3, [pc, #356]	@ (80008b8 <main+0x2c8>)
 8000754:	2200      	movs	r2, #0
 8000756:	605a      	str	r2, [r3, #4]
	dataInit.Pin = GPIO_PIN_4;
 8000758:	4b57      	ldr	r3, [pc, #348]	@ (80008b8 <main+0x2c8>)
 800075a:	2210      	movs	r2, #16
 800075c:	601a      	str	r2, [r3, #0]
	dataInit.Pull = GPIO_PULLDOWN;
 800075e:	4b56      	ldr	r3, [pc, #344]	@ (80008b8 <main+0x2c8>)
 8000760:	2202      	movs	r2, #2
 8000762:	609a      	str	r2, [r3, #8]
	dataInit.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000764:	4b54      	ldr	r3, [pc, #336]	@ (80008b8 <main+0x2c8>)
 8000766:	2203      	movs	r2, #3
 8000768:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOJ, &dataInit);
 800076a:	4953      	ldr	r1, [pc, #332]	@ (80008b8 <main+0x2c8>)
 800076c:	4851      	ldr	r0, [pc, #324]	@ (80008b4 <main+0x2c4>)
 800076e:	f000 fc91 	bl	8001094 <HAL_GPIO_Init>

	// Wait for DATA line to go down
	while(HAL_GPIO_ReadPin(GPIOJ, GPIO_PIN_4) == GPIO_PIN_SET);
 8000772:	bf00      	nop
 8000774:	2110      	movs	r1, #16
 8000776:	484f      	ldr	r0, [pc, #316]	@ (80008b4 <main+0x2c4>)
 8000778:	f000 fe38 	bl	80013ec <HAL_GPIO_ReadPin>
 800077c:	4603      	mov	r3, r0
 800077e:	2b01      	cmp	r3, #1
 8000780:	d0f8      	beq.n	8000774 <main+0x184>
	// Wait for DATA line to go high
	while(HAL_GPIO_ReadPin(GPIOJ, GPIO_PIN_4) == GPIO_PIN_RESET);
 8000782:	bf00      	nop
 8000784:	2110      	movs	r1, #16
 8000786:	484b      	ldr	r0, [pc, #300]	@ (80008b4 <main+0x2c4>)
 8000788:	f000 fe30 	bl	80013ec <HAL_GPIO_ReadPin>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d0f8      	beq.n	8000784 <main+0x194>
	// Wait for DATA signal to go low
	while(HAL_GPIO_ReadPin(GPIOJ, GPIO_PIN_4) == GPIO_PIN_SET);
 8000792:	bf00      	nop
 8000794:	2110      	movs	r1, #16
 8000796:	4847      	ldr	r0, [pc, #284]	@ (80008b4 <main+0x2c4>)
 8000798:	f000 fe28 	bl	80013ec <HAL_GPIO_ReadPin>
 800079c:	4603      	mov	r3, r0
 800079e:	2b01      	cmp	r3, #1
 80007a0:	d0f8      	beq.n	8000794 <main+0x1a4>

	// Start Capturing data packets from DHT11
	while(segment < 5) {
 80007a2:	e09c      	b.n	80008de <main+0x2ee>
		while(bitPosition >= 0) {
			// Wait for DATA line to go high
			while(HAL_GPIO_ReadPin(GPIOJ, GPIO_PIN_4) == GPIO_PIN_RESET);
 80007a4:	bf00      	nop
 80007a6:	2110      	movs	r1, #16
 80007a8:	4842      	ldr	r0, [pc, #264]	@ (80008b4 <main+0x2c4>)
 80007aa:	f000 fe1f 	bl	80013ec <HAL_GPIO_ReadPin>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d0f8      	beq.n	80007a6 <main+0x1b6>

			// Start Timer
			tim7.Instance->CR1 |= (0x1 << 1);
 80007b4:	4b41      	ldr	r3, [pc, #260]	@ (80008bc <main+0x2cc>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	681a      	ldr	r2, [r3, #0]
 80007ba:	4b40      	ldr	r3, [pc, #256]	@ (80008bc <main+0x2cc>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	f042 0202 	orr.w	r2, r2, #2
 80007c2:	601a      	str	r2, [r3, #0]
			tim7.Instance->CR1 |= (0x1);
 80007c4:	4b3d      	ldr	r3, [pc, #244]	@ (80008bc <main+0x2cc>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	4b3c      	ldr	r3, [pc, #240]	@ (80008bc <main+0x2cc>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	f042 0201 	orr.w	r2, r2, #1
 80007d2:	601a      	str	r2, [r3, #0]
			tim7.Instance->CR1 &= ~(0x1 << 1);
 80007d4:	4b39      	ldr	r3, [pc, #228]	@ (80008bc <main+0x2cc>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	681a      	ldr	r2, [r3, #0]
 80007da:	4b38      	ldr	r3, [pc, #224]	@ (80008bc <main+0x2cc>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	f022 0202 	bic.w	r2, r2, #2
 80007e2:	601a      	str	r2, [r3, #0]
			wait(tim7);
 80007e4:	4e35      	ldr	r6, [pc, #212]	@ (80008bc <main+0x2cc>)
 80007e6:	466d      	mov	r5, sp
 80007e8:	f106 0410 	add.w	r4, r6, #16
 80007ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007f8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80007fc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000800:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000804:	f000 fa19 	bl	8000c3a <wait>
			resetTimer(tim7);
 8000808:	4e2c      	ldr	r6, [pc, #176]	@ (80008bc <main+0x2cc>)
 800080a:	466d      	mov	r5, sp
 800080c:	f106 0410 	add.w	r4, r6, #16
 8000810:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000812:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000814:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000816:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000818:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800081a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800081c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000820:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000824:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000828:	f000 fa1c 	bl	8000c64 <resetTimer>

			// Classify as either a 1 or 0
			if(HAL_GPIO_ReadPin(GPIOJ, GPIO_PIN_4) == GPIO_PIN_SET) {
 800082c:	2110      	movs	r1, #16
 800082e:	4821      	ldr	r0, [pc, #132]	@ (80008b4 <main+0x2c4>)
 8000830:	f000 fddc 	bl	80013ec <HAL_GPIO_ReadPin>
 8000834:	4603      	mov	r3, r0
 8000836:	2b01      	cmp	r3, #1
 8000838:	d112      	bne.n	8000860 <main+0x270>
				value |= (0x1 << bitPosition);
 800083a:	2201      	movs	r2, #1
 800083c:	68bb      	ldr	r3, [r7, #8]
 800083e:	fa02 f303 	lsl.w	r3, r2, r3
 8000842:	b25a      	sxtb	r2, r3
 8000844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000848:	4313      	orrs	r3, r2
 800084a:	b25b      	sxtb	r3, r3
 800084c:	71fb      	strb	r3, [r7, #7]
				while(HAL_GPIO_ReadPin(GPIOJ, GPIO_PIN_4));// == GPIO_PIN_SET);
 800084e:	bf00      	nop
 8000850:	2110      	movs	r1, #16
 8000852:	4818      	ldr	r0, [pc, #96]	@ (80008b4 <main+0x2c4>)
 8000854:	f000 fdca 	bl	80013ec <HAL_GPIO_ReadPin>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d1f8      	bne.n	8000850 <main+0x260>
 800085e:	e00b      	b.n	8000878 <main+0x288>
			}
			else {
				value &= ~(0x1 << bitPosition);
 8000860:	2201      	movs	r2, #1
 8000862:	68bb      	ldr	r3, [r7, #8]
 8000864:	fa02 f303 	lsl.w	r3, r2, r3
 8000868:	b25b      	sxtb	r3, r3
 800086a:	43db      	mvns	r3, r3
 800086c:	b25a      	sxtb	r2, r3
 800086e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000872:	4013      	ands	r3, r2
 8000874:	b25b      	sxtb	r3, r3
 8000876:	71fb      	strb	r3, [r7, #7]
			}

			bitPosition = bitPosition - 1;
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	3b01      	subs	r3, #1
 800087c:	60bb      	str	r3, [r7, #8]
		while(bitPosition >= 0) {
 800087e:	68bb      	ldr	r3, [r7, #8]
 8000880:	2b00      	cmp	r3, #0
 8000882:	da8f      	bge.n	80007a4 <main+0x1b4>
		}
		switch(segment) {
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	3b01      	subs	r3, #1
 8000888:	2b03      	cmp	r3, #3
 800088a:	d821      	bhi.n	80008d0 <main+0x2e0>
 800088c:	a201      	add	r2, pc, #4	@ (adr r2, 8000894 <main+0x2a4>)
 800088e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000892:	bf00      	nop
 8000894:	080008c1 	.word	0x080008c1
 8000898:	080008c5 	.word	0x080008c5
 800089c:	080008c9 	.word	0x080008c9
 80008a0:	080008cd 	.word	0x080008cd
 80008a4:	20000170 	.word	0x20000170
 80008a8:	20000208 	.word	0x20000208
 80008ac:	0800348c 	.word	0x0800348c
 80008b0:	200000e8 	.word	0x200000e8
 80008b4:	40022400 	.word	0x40022400
 80008b8:	200000d4 	.word	0x200000d4
 80008bc:	200001bc 	.word	0x200001bc
			case 1: rh = value;
 80008c0:	79fb      	ldrb	r3, [r7, #7]
 80008c2:	71bb      	strb	r3, [r7, #6]
			case 2: rhDec = value;
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	713b      	strb	r3, [r7, #4]
			case 3: temp = value;
 80008c8:	79fb      	ldrb	r3, [r7, #7]
 80008ca:	717b      	strb	r3, [r7, #5]
			case 4: tempDec = value;
 80008cc:	79fb      	ldrb	r3, [r7, #7]
 80008ce:	70fb      	strb	r3, [r7, #3]
		}
		value = (uint8_t)0;
 80008d0:	2300      	movs	r3, #0
 80008d2:	71fb      	strb	r3, [r7, #7]
		segment = segment + 1;
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	3301      	adds	r3, #1
 80008d8:	60fb      	str	r3, [r7, #12]
		bitPosition = 7;
 80008da:	2307      	movs	r3, #7
 80008dc:	60bb      	str	r3, [r7, #8]
	while(segment < 5) {
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	2b04      	cmp	r3, #4
 80008e2:	ddcc      	ble.n	800087e <main+0x28e>
	}

	memset(msg, 0, strlen(msg));
 80008e4:	481c      	ldr	r0, [pc, #112]	@ (8000958 <main+0x368>)
 80008e6:	f7ff fcab 	bl	8000240 <strlen>
 80008ea:	4603      	mov	r3, r0
 80008ec:	461a      	mov	r2, r3
 80008ee:	2100      	movs	r1, #0
 80008f0:	4819      	ldr	r0, [pc, #100]	@ (8000958 <main+0x368>)
 80008f2:	f002 f937 	bl	8002b64 <memset>
	sprintf((char*)msg, "RH:%d\%%\n", rh);
 80008f6:	79bb      	ldrb	r3, [r7, #6]
 80008f8:	461a      	mov	r2, r3
 80008fa:	4918      	ldr	r1, [pc, #96]	@ (800095c <main+0x36c>)
 80008fc:	4816      	ldr	r0, [pc, #88]	@ (8000958 <main+0x368>)
 80008fe:	f002 f911 	bl	8002b24 <siprintf>
	HAL_UART_Transmit(&huart6, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000902:	4815      	ldr	r0, [pc, #84]	@ (8000958 <main+0x368>)
 8000904:	f7ff fc9c 	bl	8000240 <strlen>
 8000908:	4603      	mov	r3, r0
 800090a:	b29a      	uxth	r2, r3
 800090c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000910:	4911      	ldr	r1, [pc, #68]	@ (8000958 <main+0x368>)
 8000912:	4813      	ldr	r0, [pc, #76]	@ (8000960 <main+0x370>)
 8000914:	f001 fbfc 	bl	8002110 <HAL_UART_Transmit>

	memset(msg, 0, strlen(msg));
 8000918:	480f      	ldr	r0, [pc, #60]	@ (8000958 <main+0x368>)
 800091a:	f7ff fc91 	bl	8000240 <strlen>
 800091e:	4603      	mov	r3, r0
 8000920:	461a      	mov	r2, r3
 8000922:	2100      	movs	r1, #0
 8000924:	480c      	ldr	r0, [pc, #48]	@ (8000958 <main+0x368>)
 8000926:	f002 f91d 	bl	8002b64 <memset>
	sprintf((char*)msg, "Temperature:%d C\n", temp);
 800092a:	797b      	ldrb	r3, [r7, #5]
 800092c:	461a      	mov	r2, r3
 800092e:	490d      	ldr	r1, [pc, #52]	@ (8000964 <main+0x374>)
 8000930:	4809      	ldr	r0, [pc, #36]	@ (8000958 <main+0x368>)
 8000932:	f002 f8f7 	bl	8002b24 <siprintf>
	HAL_UART_Transmit(&huart6, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000936:	4808      	ldr	r0, [pc, #32]	@ (8000958 <main+0x368>)
 8000938:	f7ff fc82 	bl	8000240 <strlen>
 800093c:	4603      	mov	r3, r0
 800093e:	b29a      	uxth	r2, r3
 8000940:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000944:	4904      	ldr	r1, [pc, #16]	@ (8000958 <main+0x368>)
 8000946:	4806      	ldr	r0, [pc, #24]	@ (8000960 <main+0x370>)
 8000948:	f001 fbe2 	bl	8002110 <HAL_UART_Transmit>


	return 0;
 800094c:	2300      	movs	r3, #0
}
 800094e:	4618      	mov	r0, r3
 8000950:	3714      	adds	r7, #20
 8000952:	46bd      	mov	sp, r7
 8000954:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000956:	bf00      	nop
 8000958:	20000208 	.word	0x20000208
 800095c:	080034cc 	.word	0x080034cc
 8000960:	200000e8 	.word	0x200000e8
 8000964:	080034d8 	.word	0x080034d8

08000968 <SystemClock_Config>:

void SystemClock_Config(void) {
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
	oscInit.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800096c:	4b26      	ldr	r3, [pc, #152]	@ (8000a08 <SystemClock_Config+0xa0>)
 800096e:	2201      	movs	r2, #1
 8000970:	601a      	str	r2, [r3, #0]
	oscInit.HSEState = RCC_HSE_BYPASS;
 8000972:	4b25      	ldr	r3, [pc, #148]	@ (8000a08 <SystemClock_Config+0xa0>)
 8000974:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
 8000978:	605a      	str	r2, [r3, #4]
	oscInit.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800097a:	4b23      	ldr	r3, [pc, #140]	@ (8000a08 <SystemClock_Config+0xa0>)
 800097c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000980:	61da      	str	r2, [r3, #28]
	oscInit.PLL.PLLM = 19;
 8000982:	4b21      	ldr	r3, [pc, #132]	@ (8000a08 <SystemClock_Config+0xa0>)
 8000984:	2213      	movs	r2, #19
 8000986:	621a      	str	r2, [r3, #32]
	oscInit.PLL.PLLN = 152;
 8000988:	4b1f      	ldr	r3, [pc, #124]	@ (8000a08 <SystemClock_Config+0xa0>)
 800098a:	2298      	movs	r2, #152	@ 0x98
 800098c:	625a      	str	r2, [r3, #36]	@ 0x24
	oscInit.PLL.PLLP = RCC_PLLP_DIV2;
 800098e:	4b1e      	ldr	r3, [pc, #120]	@ (8000a08 <SystemClock_Config+0xa0>)
 8000990:	2202      	movs	r2, #2
 8000992:	629a      	str	r2, [r3, #40]	@ 0x28
	oscInit.PLL.PLLState = RCC_PLL_ON;
 8000994:	4b1c      	ldr	r3, [pc, #112]	@ (8000a08 <SystemClock_Config+0xa0>)
 8000996:	2202      	movs	r2, #2
 8000998:	619a      	str	r2, [r3, #24]
	if(HAL_RCC_OscConfig(&oscInit) != HAL_OK) {
 800099a:	481b      	ldr	r0, [pc, #108]	@ (8000a08 <SystemClock_Config+0xa0>)
 800099c:	f000 fd58 	bl	8001450 <HAL_RCC_OscConfig>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <SystemClock_Config+0x42>
		Error_Handler();
 80009a6:	f000 f97b 	bl	8000ca0 <Error_Handler>
	}

	clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80009aa:	4b18      	ldr	r3, [pc, #96]	@ (8000a0c <SystemClock_Config+0xa4>)
 80009ac:	220f      	movs	r2, #15
 80009ae:	601a      	str	r2, [r3, #0]
	clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009b0:	4b16      	ldr	r3, [pc, #88]	@ (8000a0c <SystemClock_Config+0xa4>)
 80009b2:	2202      	movs	r2, #2
 80009b4:	605a      	str	r2, [r3, #4]
	clkInit.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80009b6:	4b15      	ldr	r3, [pc, #84]	@ (8000a0c <SystemClock_Config+0xa4>)
 80009b8:	2280      	movs	r2, #128	@ 0x80
 80009ba:	609a      	str	r2, [r3, #8]
	clkInit.APB1CLKDivider = RCC_HCLK_DIV1;
 80009bc:	4b13      	ldr	r3, [pc, #76]	@ (8000a0c <SystemClock_Config+0xa4>)
 80009be:	2200      	movs	r2, #0
 80009c0:	60da      	str	r2, [r3, #12]
	clkInit.APB2CLKDivider = RCC_HCLK_DIV1;
 80009c2:	4b12      	ldr	r3, [pc, #72]	@ (8000a0c <SystemClock_Config+0xa4>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	611a      	str	r2, [r3, #16]
	if( HAL_RCC_ClockConfig(&clkInit, FLASH_ACR_LATENCY_1WS) != HAL_OK) {
 80009c8:	2101      	movs	r1, #1
 80009ca:	4810      	ldr	r0, [pc, #64]	@ (8000a0c <SystemClock_Config+0xa4>)
 80009cc:	f000 ffee 	bl	80019ac <HAL_RCC_ClockConfig>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <SystemClock_Config+0x72>
		Error_Handler();
 80009d6:	f000 f963 	bl	8000ca0 <Error_Handler>
	}

	__HAL_RCC_HSI_DISABLE(); // Turn off the HSI to save power now
 80009da:	4b0d      	ldr	r3, [pc, #52]	@ (8000a10 <SystemClock_Config+0xa8>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4a0c      	ldr	r2, [pc, #48]	@ (8000a10 <SystemClock_Config+0xa8>)
 80009e0:	f023 0301 	bic.w	r3, r3, #1
 80009e4:	6013      	str	r3, [r2, #0]

	// Reconfigure Systick now to work withe the new System Clock Frequency
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80009e6:	f001 f993 	bl	8001d10 <HAL_RCC_GetHCLKFreq>
 80009ea:	4603      	mov	r3, r0
 80009ec:	4a09      	ldr	r2, [pc, #36]	@ (8000a14 <SystemClock_Config+0xac>)
 80009ee:	fba2 2303 	umull	r2, r3, r2, r3
 80009f2:	099b      	lsrs	r3, r3, #6
 80009f4:	4618      	mov	r0, r3
 80009f6:	f000 fb16 	bl	8001026 <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80009fa:	2004      	movs	r0, #4
 80009fc:	f000 fb20 	bl	8001040 <HAL_SYSTICK_CLKSourceConfig>

	// Renable the USART Peripheral to regenerate the baud rate
	UART6_Init();
 8000a00:	f000 f834 	bl	8000a6c <UART6_Init>
}
 8000a04:	bf00      	nop
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	20000078 	.word	0x20000078
 8000a0c:	200000ac 	.word	0x200000ac
 8000a10:	40023800 	.word	0x40023800
 8000a14:	10624dd3 	.word	0x10624dd3

08000a18 <B_USER_Init>:


void B_USER_Init(void) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
	// Start GPIOA Clock
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1e:	4b10      	ldr	r3, [pc, #64]	@ (8000a60 <B_USER_Init+0x48>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a22:	4a0f      	ldr	r2, [pc, #60]	@ (8000a60 <B_USER_Init+0x48>)
 8000a24:	f043 0301 	orr.w	r3, r3, #1
 8000a28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a60 <B_USER_Init+0x48>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2e:	f003 0301 	and.w	r3, r3, #1
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]
	// Inititialize GPIO Init Structure
	usrBtnInit.Mode = GPIO_MODE_INPUT;
 8000a36:	4b0b      	ldr	r3, [pc, #44]	@ (8000a64 <B_USER_Init+0x4c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	605a      	str	r2, [r3, #4]
	usrBtnInit.Pin = GPIO_PIN_0;
 8000a3c:	4b09      	ldr	r3, [pc, #36]	@ (8000a64 <B_USER_Init+0x4c>)
 8000a3e:	2201      	movs	r2, #1
 8000a40:	601a      	str	r2, [r3, #0]
	usrBtnInit.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a42:	4b08      	ldr	r3, [pc, #32]	@ (8000a64 <B_USER_Init+0x4c>)
 8000a44:	2202      	movs	r2, #2
 8000a46:	60da      	str	r2, [r3, #12]
	usrBtnInit.Pull = GPIO_PULLUP;
 8000a48:	4b06      	ldr	r3, [pc, #24]	@ (8000a64 <B_USER_Init+0x4c>)
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOA, &usrBtnInit);
 8000a4e:	4905      	ldr	r1, [pc, #20]	@ (8000a64 <B_USER_Init+0x4c>)
 8000a50:	4805      	ldr	r0, [pc, #20]	@ (8000a68 <B_USER_Init+0x50>)
 8000a52:	f000 fb1f 	bl	8001094 <HAL_GPIO_Init>
}
 8000a56:	bf00      	nop
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40023800 	.word	0x40023800
 8000a64:	200000c0 	.word	0x200000c0
 8000a68:	40020000 	.word	0x40020000

08000a6c <UART6_Init>:

	// Stop GPIOJ Clock
	__HAL_RCC_GPIOJ_CLK_DISABLE();
}

void UART6_Init(void) {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
	// Start USART6 Clock
	__HAL_RCC_USART6_CLK_ENABLE();
 8000a72:	4b15      	ldr	r3, [pc, #84]	@ (8000ac8 <UART6_Init+0x5c>)
 8000a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a76:	4a14      	ldr	r2, [pc, #80]	@ (8000ac8 <UART6_Init+0x5c>)
 8000a78:	f043 0320 	orr.w	r3, r3, #32
 8000a7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a7e:	4b12      	ldr	r3, [pc, #72]	@ (8000ac8 <UART6_Init+0x5c>)
 8000a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a82:	f003 0320 	and.w	r3, r3, #32
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	687b      	ldr	r3, [r7, #4]

	// Initialize USART6 Handle
	huart6.Instance = USART6;
 8000a8a:	4b10      	ldr	r3, [pc, #64]	@ (8000acc <UART6_Init+0x60>)
 8000a8c:	4a10      	ldr	r2, [pc, #64]	@ (8000ad0 <UART6_Init+0x64>)
 8000a8e:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 8000a90:	4b0e      	ldr	r3, [pc, #56]	@ (8000acc <UART6_Init+0x60>)
 8000a92:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a96:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000a98:	4b0c      	ldr	r3, [pc, #48]	@ (8000acc <UART6_Init+0x60>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8000a9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000acc <UART6_Init+0x60>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	60da      	str	r2, [r3, #12]
	huart6.Init.Mode = UART_MODE_TX;
 8000aa4:	4b09      	ldr	r3, [pc, #36]	@ (8000acc <UART6_Init+0x60>)
 8000aa6:	2208      	movs	r2, #8
 8000aa8:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aaa:	4b08      	ldr	r3, [pc, #32]	@ (8000acc <UART6_Init+0x60>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	619a      	str	r2, [r3, #24]
	if(HAL_UART_Init(&huart6) != HAL_OK) {
 8000ab0:	4806      	ldr	r0, [pc, #24]	@ (8000acc <UART6_Init+0x60>)
 8000ab2:	f001 fadf 	bl	8002074 <HAL_UART_Init>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <UART6_Init+0x54>
		Error_Handler();
 8000abc:	f000 f8f0 	bl	8000ca0 <Error_Handler>
	}
}
 8000ac0:	bf00      	nop
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40023800 	.word	0x40023800
 8000acc:	200000e8 	.word	0x200000e8
 8000ad0:	40011400 	.word	0x40011400

08000ad4 <TIM6_Init>:
	memset(msg, 0, strlen(msg));
	sprintf((char*)msg, "Hello from STM32");
	HAL_UART_Transmit(&huart6, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
}

void TIM6_Init(void) {
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
	// Start TIM6 Clock
	__HAL_RCC_TIM6_CLK_ENABLE();
 8000ada:	4b13      	ldr	r3, [pc, #76]	@ (8000b28 <TIM6_Init+0x54>)
 8000adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ade:	4a12      	ldr	r2, [pc, #72]	@ (8000b28 <TIM6_Init+0x54>)
 8000ae0:	f043 0310 	orr.w	r3, r3, #16
 8000ae4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ae6:	4b10      	ldr	r3, [pc, #64]	@ (8000b28 <TIM6_Init+0x54>)
 8000ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aea:	f003 0310 	and.w	r3, r3, #16
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]

	// Initialize TIM6 handler
	tim6.Instance = TIM6;
 8000af2:	4b0e      	ldr	r3, [pc, #56]	@ (8000b2c <TIM6_Init+0x58>)
 8000af4:	4a0e      	ldr	r2, [pc, #56]	@ (8000b30 <TIM6_Init+0x5c>)
 8000af6:	601a      	str	r2, [r3, #0]
	tim6.Instance->CR1 |= (0x1 << 2);
 8000af8:	4b0c      	ldr	r3, [pc, #48]	@ (8000b2c <TIM6_Init+0x58>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	4b0b      	ldr	r3, [pc, #44]	@ (8000b2c <TIM6_Init+0x58>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f042 0204 	orr.w	r2, r2, #4
 8000b06:	601a      	str	r2, [r3, #0]
	tim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b08:	4b08      	ldr	r3, [pc, #32]	@ (8000b2c <TIM6_Init+0x58>)
 8000b0a:	2280      	movs	r2, #128	@ 0x80
 8000b0c:	619a      	str	r2, [r3, #24]
	if(HAL_TIM_Base_Init(&tim6) != HAL_OK) {
 8000b0e:	4807      	ldr	r0, [pc, #28]	@ (8000b2c <TIM6_Init+0x58>)
 8000b10:	f001 f932 	bl	8001d78 <HAL_TIM_Base_Init>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <TIM6_Init+0x4a>
		Error_Handler();
 8000b1a:	f000 f8c1 	bl	8000ca0 <Error_Handler>
	}
}
 8000b1e:	bf00      	nop
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40023800 	.word	0x40023800
 8000b2c:	20000170 	.word	0x20000170
 8000b30:	40001000 	.word	0x40001000

08000b34 <TIM7_Init>:

void TIM7_Init(void) {
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
	// Start TIM6 Clock
	__HAL_RCC_TIM7_CLK_ENABLE();
 8000b3a:	4b16      	ldr	r3, [pc, #88]	@ (8000b94 <TIM7_Init+0x60>)
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b3e:	4a15      	ldr	r2, [pc, #84]	@ (8000b94 <TIM7_Init+0x60>)
 8000b40:	f043 0320 	orr.w	r3, r3, #32
 8000b44:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b46:	4b13      	ldr	r3, [pc, #76]	@ (8000b94 <TIM7_Init+0x60>)
 8000b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b4a:	f003 0320 	and.w	r3, r3, #32
 8000b4e:	607b      	str	r3, [r7, #4]
 8000b50:	687b      	ldr	r3, [r7, #4]

	// Initialize TIM6 handler
	tim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b52:	4b11      	ldr	r3, [pc, #68]	@ (8000b98 <TIM7_Init+0x64>)
 8000b54:	2280      	movs	r2, #128	@ 0x80
 8000b56:	619a      	str	r2, [r3, #24]
	tim7.Instance = TIM7;
 8000b58:	4b0f      	ldr	r3, [pc, #60]	@ (8000b98 <TIM7_Init+0x64>)
 8000b5a:	4a10      	ldr	r2, [pc, #64]	@ (8000b9c <TIM7_Init+0x68>)
 8000b5c:	601a      	str	r2, [r3, #0]
	tim7.Init.Prescaler = 0;
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b98 <TIM7_Init+0x64>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	605a      	str	r2, [r3, #4]
	tim7.Init.Period = 2499;
 8000b64:	4b0c      	ldr	r3, [pc, #48]	@ (8000b98 <TIM7_Init+0x64>)
 8000b66:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8000b6a:	60da      	str	r2, [r3, #12]
	if(HAL_TIM_Base_Init(&tim7) != HAL_OK) {
 8000b6c:	480a      	ldr	r0, [pc, #40]	@ (8000b98 <TIM7_Init+0x64>)
 8000b6e:	f001 f903 	bl	8001d78 <HAL_TIM_Base_Init>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <TIM7_Init+0x48>
		Error_Handler();
 8000b78:	f000 f892 	bl	8000ca0 <Error_Handler>
	}
	tim7.Instance->CR1 |= (0x1 << 2);
 8000b7c:	4b06      	ldr	r3, [pc, #24]	@ (8000b98 <TIM7_Init+0x64>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	4b05      	ldr	r3, [pc, #20]	@ (8000b98 <TIM7_Init+0x64>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f042 0204 	orr.w	r2, r2, #4
 8000b8a:	601a      	str	r2, [r3, #0]

}
 8000b8c:	bf00      	nop
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40023800 	.word	0x40023800
 8000b98:	200001bc 	.word	0x200001bc
 8000b9c:	40001400 	.word	0x40001400

08000ba0 <DHT11_DATA_Init>:

	// De-initialize Output Pin
	HAL_GPIO_DeInit(gpio, pinNo);
}

void DHT11_DATA_Init(void) {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
	// Start GPIOJ Clock
	__HAL_RCC_GPIOJ_CLK_ENABLE();
 8000ba6:	4b12      	ldr	r3, [pc, #72]	@ (8000bf0 <DHT11_DATA_Init+0x50>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000baa:	4a11      	ldr	r2, [pc, #68]	@ (8000bf0 <DHT11_DATA_Init+0x50>)
 8000bac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bb2:	4b0f      	ldr	r3, [pc, #60]	@ (8000bf0 <DHT11_DATA_Init+0x50>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]

	// Inititialize GPIO Init Structure
	dataInit.Mode = GPIO_MODE_OUTPUT_PP;
 8000bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf4 <DHT11_DATA_Init+0x54>)
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	605a      	str	r2, [r3, #4]
	dataInit.Pin = GPIO_PIN_4;
 8000bc4:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf4 <DHT11_DATA_Init+0x54>)
 8000bc6:	2210      	movs	r2, #16
 8000bc8:	601a      	str	r2, [r3, #0]
	dataInit.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bca:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf4 <DHT11_DATA_Init+0x54>)
 8000bcc:	2202      	movs	r2, #2
 8000bce:	60da      	str	r2, [r3, #12]
	dataInit.Pull = GPIO_PULLUP;
 8000bd0:	4b08      	ldr	r3, [pc, #32]	@ (8000bf4 <DHT11_DATA_Init+0x54>)
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOJ, &dataInit);
 8000bd6:	4907      	ldr	r1, [pc, #28]	@ (8000bf4 <DHT11_DATA_Init+0x54>)
 8000bd8:	4807      	ldr	r0, [pc, #28]	@ (8000bf8 <DHT11_DATA_Init+0x58>)
 8000bda:	f000 fa5b 	bl	8001094 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_4,GPIO_PIN_SET);
 8000bde:	2201      	movs	r2, #1
 8000be0:	2110      	movs	r1, #16
 8000be2:	4805      	ldr	r0, [pc, #20]	@ (8000bf8 <DHT11_DATA_Init+0x58>)
 8000be4:	f000 fc1a 	bl	800141c <HAL_GPIO_WritePin>
}
 8000be8:	bf00      	nop
 8000bea:	3708      	adds	r7, #8
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40023800 	.word	0x40023800
 8000bf4:	200000d4 	.word	0x200000d4
 8000bf8:	40022400 	.word	0x40022400

08000bfc <startTimer>:
	HAL_GPIO_Init(GPIOJ, &dataInit);

	while(1);
}

void startTimer(TIM_HandleTypeDef tim, uint16_t preScaler, uint16_t arr) {
 8000bfc:	b084      	sub	sp, #16
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	f107 0c08 	add.w	ip, r7, #8
 8000c06:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	tim.Instance->ARR = arr;
 8000c0a:	68bb      	ldr	r3, [r7, #8]
 8000c0c:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 8000c10:	62da      	str	r2, [r3, #44]	@ 0x2c
	tim.Instance->PSC = preScaler;
 8000c12:	68bb      	ldr	r3, [r7, #8]
 8000c14:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 8000c18:	629a      	str	r2, [r3, #40]	@ 0x28
	tim.Instance->EGR = 1;
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	615a      	str	r2, [r3, #20]
	tim.Instance->SR = 0;
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	2200      	movs	r2, #0
 8000c24:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start(&tim);
 8000c26:	f107 0008 	add.w	r0, r7, #8
 8000c2a:	f001 f907 	bl	8001e3c <HAL_TIM_Base_Start>
}
 8000c2e:	bf00      	nop
 8000c30:	46bd      	mov	sp, r7
 8000c32:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c36:	b004      	add	sp, #16
 8000c38:	4770      	bx	lr

08000c3a <wait>:

void wait(TIM_HandleTypeDef tim) {
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	b490      	push	{r4, r7}
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	f107 0408 	add.w	r4, r7, #8
 8000c44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	while(!(tim.Instance->SR & (0x0001)));
 8000c48:	bf00      	nop
 8000c4a:	68bb      	ldr	r3, [r7, #8]
 8000c4c:	691b      	ldr	r3, [r3, #16]
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d0f9      	beq.n	8000c4a <wait+0x10>
}
 8000c56:	bf00      	nop
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bc90      	pop	{r4, r7}
 8000c5e:	b004      	add	sp, #16
 8000c60:	4770      	bx	lr
	...

08000c64 <resetTimer>:

void resetTimer(TIM_HandleTypeDef tim) {
 8000c64:	b084      	sub	sp, #16
 8000c66:	b490      	push	{r4, r7}
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	f107 0408 	add.w	r4, r7, #8
 8000c6e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	tim.Instance->CR1 &= ~(0x1);
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	f022 0201 	bic.w	r2, r2, #1
 8000c7c:	601a      	str	r2, [r3, #0]
	tim.Instance->CNT &= ~(0xFFFF);
 8000c7e:	68bb      	ldr	r3, [r7, #8]
 8000c80:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000c82:	68ba      	ldr	r2, [r7, #8]
 8000c84:	4b05      	ldr	r3, [pc, #20]	@ (8000c9c <resetTimer+0x38>)
 8000c86:	400b      	ands	r3, r1
 8000c88:	6253      	str	r3, [r2, #36]	@ 0x24
	tim.Instance->SR = 0;
 8000c8a:	68bb      	ldr	r3, [r7, #8]
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	611a      	str	r2, [r3, #16]
}
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bc90      	pop	{r4, r7}
 8000c96:	b004      	add	sp, #16
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	ffff0000 	.word	0xffff0000

08000ca0 <Error_Handler>:


void Error_Handler(void) {
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0

}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
	...

08000cb0 <HAL_MspInit>:
 */

#include "main.h"

void HAL_MspInit(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
	// Perform the low level processor specific inits here using processor specific API's provided by the Cube HAL layer in Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_cortex.c
	// 1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb4:	2003      	movs	r0, #3
 8000cb6:	f000 f98f 	bl	8000fd8 <HAL_NVIC_SetPriorityGrouping>

	// 2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= (0x7 << 16);
 8000cba:	4b0d      	ldr	r3, [pc, #52]	@ (8000cf0 <HAL_MspInit+0x40>)
 8000cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cbe:	4a0c      	ldr	r2, [pc, #48]	@ (8000cf0 <HAL_MspInit+0x40>)
 8000cc0:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8000cc4:	6253      	str	r3, [r2, #36]	@ 0x24

	// 3. Configure the prority for the system
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2100      	movs	r1, #0
 8000cca:	f06f 000b 	mvn.w	r0, #11
 8000cce:	f000 f98e 	bl	8000fee <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	f06f 000a 	mvn.w	r0, #10
 8000cda:	f000 f988 	bl	8000fee <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	f06f 0009 	mvn.w	r0, #9
 8000ce6:	f000 f982 	bl	8000fee <HAL_NVIC_SetPriority>
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	e000ed00 	.word	0xe000ed00

08000cf4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b088      	sub	sp, #32
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
	// Start GPIOC Clock
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000cfc:	4b0f      	ldr	r3, [pc, #60]	@ (8000d3c <HAL_UART_MspInit+0x48>)
 8000cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d00:	4a0e      	ldr	r2, [pc, #56]	@ (8000d3c <HAL_UART_MspInit+0x48>)
 8000d02:	f043 0304 	orr.w	r3, r3, #4
 8000d06:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d08:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <HAL_UART_MspInit+0x48>)
 8000d0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0c:	f003 0304 	and.w	r3, r3, #4
 8000d10:	60bb      	str	r3, [r7, #8]
 8000d12:	68bb      	ldr	r3, [r7, #8]

	// Initialize GPIO Init Structure
	GPIO_InitTypeDef gpioCInit;
	gpioCInit.Pin = GPIO_PIN_6;
 8000d14:	2340      	movs	r3, #64	@ 0x40
 8000d16:	60fb      	str	r3, [r7, #12]
	gpioCInit.Mode = GPIO_MODE_AF_PP;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	613b      	str	r3, [r7, #16]
	gpioCInit.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	617b      	str	r3, [r7, #20]
	gpioCInit.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d20:	2302      	movs	r3, #2
 8000d22:	61bb      	str	r3, [r7, #24]
	gpioCInit.Alternate = GPIO_AF8_USART6;
 8000d24:	2308      	movs	r3, #8
 8000d26:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &gpioCInit);
 8000d28:	f107 030c 	add.w	r3, r7, #12
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4804      	ldr	r0, [pc, #16]	@ (8000d40 <HAL_UART_MspInit+0x4c>)
 8000d30:	f000 f9b0 	bl	8001094 <HAL_GPIO_Init>
}
 8000d34:	bf00      	nop
 8000d36:	3720      	adds	r7, #32
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	40023800 	.word	0x40023800
 8000d40:	40020800 	.word	0x40020800

08000d44 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d48:	4b06      	ldr	r3, [pc, #24]	@ (8000d64 <SystemInit+0x20>)
 8000d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d4e:	4a05      	ldr	r2, [pc, #20]	@ (8000d64 <SystemInit+0x20>)
 8000d50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000da0 <LoopFillZerobss+0xe>
 
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d6c:	f7ff ffea 	bl	8000d44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d70:	480c      	ldr	r0, [pc, #48]	@ (8000da4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d72:	490d      	ldr	r1, [pc, #52]	@ (8000da8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d74:	4a0d      	ldr	r2, [pc, #52]	@ (8000dac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d78:	e002      	b.n	8000d80 <LoopCopyDataInit>

08000d7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d7e:	3304      	adds	r3, #4

08000d80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d84:	d3f9      	bcc.n	8000d7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d86:	4a0a      	ldr	r2, [pc, #40]	@ (8000db0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d88:	4c0a      	ldr	r4, [pc, #40]	@ (8000db4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d8c:	e001      	b.n	8000d92 <LoopFillZerobss>

08000d8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d90:	3204      	adds	r2, #4

08000d92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d94:	d3fb      	bcc.n	8000d8e <FillZerobss>
   
/* Call static constructors */
    bl __libc_init_array
 8000d96:	f001 feed 	bl	8002b74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d9a:	f7ff fc29 	bl	80005f0 <main>
  bx  lr    
 8000d9e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000da0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000da4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000da8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000dac:	0800355c 	.word	0x0800355c
  ldr r2, =_sbss
 8000db0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000db4:	200003bc 	.word	0x200003bc

08000db8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000db8:	e7fe      	b.n	8000db8 <ADC_IRQHandler>

08000dba <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dbe:	2003      	movs	r0, #3
 8000dc0:	f000 f90a 	bl	8000fd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dc4:	200f      	movs	r0, #15
 8000dc6:	f000 f805 	bl	8000dd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dca:	f7ff ff71 	bl	8000cb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dce:	2300      	movs	r3, #0
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ddc:	4b12      	ldr	r3, [pc, #72]	@ (8000e28 <HAL_InitTick+0x54>)
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	4b12      	ldr	r3, [pc, #72]	@ (8000e2c <HAL_InitTick+0x58>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	4619      	mov	r1, r3
 8000de6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000df2:	4618      	mov	r0, r3
 8000df4:	f000 f917 	bl	8001026 <HAL_SYSTICK_Config>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e00e      	b.n	8000e20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2b0f      	cmp	r3, #15
 8000e06:	d80a      	bhi.n	8000e1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	6879      	ldr	r1, [r7, #4]
 8000e0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e10:	f000 f8ed 	bl	8000fee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e14:	4a06      	ldr	r2, [pc, #24]	@ (8000e30 <HAL_InitTick+0x5c>)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	e000      	b.n	8000e20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	20000000 	.word	0x20000000
 8000e2c:	20000008 	.word	0x20000008
 8000e30:	20000004 	.word	0x20000004

08000e34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e38:	4b06      	ldr	r3, [pc, #24]	@ (8000e54 <HAL_IncTick+0x20>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	4b06      	ldr	r3, [pc, #24]	@ (8000e58 <HAL_IncTick+0x24>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4413      	add	r3, r2
 8000e44:	4a04      	ldr	r2, [pc, #16]	@ (8000e58 <HAL_IncTick+0x24>)
 8000e46:	6013      	str	r3, [r2, #0]
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	20000008 	.word	0x20000008
 8000e58:	2000026c 	.word	0x2000026c

08000e5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e60:	4b03      	ldr	r3, [pc, #12]	@ (8000e70 <HAL_GetTick+0x14>)
 8000e62:	681b      	ldr	r3, [r3, #0]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	2000026c 	.word	0x2000026c

08000e74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f003 0307 	and.w	r3, r3, #7
 8000e82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e84:	4b0b      	ldr	r3, [pc, #44]	@ (8000eb4 <__NVIC_SetPriorityGrouping+0x40>)
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e8a:	68ba      	ldr	r2, [r7, #8]
 8000e8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e90:	4013      	ands	r3, r2
 8000e92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e9c:	4b06      	ldr	r3, [pc, #24]	@ (8000eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ea2:	4a04      	ldr	r2, [pc, #16]	@ (8000eb4 <__NVIC_SetPriorityGrouping+0x40>)
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	60d3      	str	r3, [r2, #12]
}
 8000ea8:	bf00      	nop
 8000eaa:	3714      	adds	r7, #20
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	e000ed00 	.word	0xe000ed00
 8000eb8:	05fa0000 	.word	0x05fa0000

08000ebc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ec0:	4b04      	ldr	r3, [pc, #16]	@ (8000ed4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	0a1b      	lsrs	r3, r3, #8
 8000ec6:	f003 0307 	and.w	r3, r3, #7
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	6039      	str	r1, [r7, #0]
 8000ee2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	db0a      	blt.n	8000f02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	490c      	ldr	r1, [pc, #48]	@ (8000f24 <__NVIC_SetPriority+0x4c>)
 8000ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef6:	0112      	lsls	r2, r2, #4
 8000ef8:	b2d2      	uxtb	r2, r2
 8000efa:	440b      	add	r3, r1
 8000efc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f00:	e00a      	b.n	8000f18 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	b2da      	uxtb	r2, r3
 8000f06:	4908      	ldr	r1, [pc, #32]	@ (8000f28 <__NVIC_SetPriority+0x50>)
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	f003 030f 	and.w	r3, r3, #15
 8000f0e:	3b04      	subs	r3, #4
 8000f10:	0112      	lsls	r2, r2, #4
 8000f12:	b2d2      	uxtb	r2, r2
 8000f14:	440b      	add	r3, r1
 8000f16:	761a      	strb	r2, [r3, #24]
}
 8000f18:	bf00      	nop
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	e000e100 	.word	0xe000e100
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b089      	sub	sp, #36	@ 0x24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	f003 0307 	and.w	r3, r3, #7
 8000f3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	f1c3 0307 	rsb	r3, r3, #7
 8000f46:	2b04      	cmp	r3, #4
 8000f48:	bf28      	it	cs
 8000f4a:	2304      	movcs	r3, #4
 8000f4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	3304      	adds	r3, #4
 8000f52:	2b06      	cmp	r3, #6
 8000f54:	d902      	bls.n	8000f5c <NVIC_EncodePriority+0x30>
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	3b03      	subs	r3, #3
 8000f5a:	e000      	b.n	8000f5e <NVIC_EncodePriority+0x32>
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f60:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	43da      	mvns	r2, r3
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	401a      	ands	r2, r3
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f74:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7e:	43d9      	mvns	r1, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f84:	4313      	orrs	r3, r2
         );
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3724      	adds	r7, #36	@ 0x24
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
	...

08000f94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fa4:	d301      	bcc.n	8000faa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e00f      	b.n	8000fca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000faa:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd4 <SysTick_Config+0x40>)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	3b01      	subs	r3, #1
 8000fb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fb2:	210f      	movs	r1, #15
 8000fb4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000fb8:	f7ff ff8e 	bl	8000ed8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fbc:	4b05      	ldr	r3, [pc, #20]	@ (8000fd4 <SysTick_Config+0x40>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fc2:	4b04      	ldr	r3, [pc, #16]	@ (8000fd4 <SysTick_Config+0x40>)
 8000fc4:	2207      	movs	r2, #7
 8000fc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	e000e010 	.word	0xe000e010

08000fd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f7ff ff47 	bl	8000e74 <__NVIC_SetPriorityGrouping>
}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b086      	sub	sp, #24
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	60b9      	str	r1, [r7, #8]
 8000ff8:	607a      	str	r2, [r7, #4]
 8000ffa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001000:	f7ff ff5c 	bl	8000ebc <__NVIC_GetPriorityGrouping>
 8001004:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	68b9      	ldr	r1, [r7, #8]
 800100a:	6978      	ldr	r0, [r7, #20]
 800100c:	f7ff ff8e 	bl	8000f2c <NVIC_EncodePriority>
 8001010:	4602      	mov	r2, r0
 8001012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001016:	4611      	mov	r1, r2
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff ff5d 	bl	8000ed8 <__NVIC_SetPriority>
}
 800101e:	bf00      	nop
 8001020:	3718      	adds	r7, #24
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b082      	sub	sp, #8
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f7ff ffb0 	bl	8000f94 <SysTick_Config>
 8001034:	4603      	mov	r3, r0
}
 8001036:	4618      	mov	r0, r3
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
	...

08001040 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2b04      	cmp	r3, #4
 800104c:	d106      	bne.n	800105c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800104e:	4b09      	ldr	r3, [pc, #36]	@ (8001074 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a08      	ldr	r2, [pc, #32]	@ (8001074 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001054:	f043 0304 	orr.w	r3, r3, #4
 8001058:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800105a:	e005      	b.n	8001068 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800105c:	4b05      	ldr	r3, [pc, #20]	@ (8001074 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a04      	ldr	r2, [pc, #16]	@ (8001074 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001062:	f023 0304 	bic.w	r3, r3, #4
 8001066:	6013      	str	r3, [r2, #0]
}
 8001068:	bf00      	nop
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	e000e010 	.word	0xe000e010

08001078 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800107c:	f000 f802 	bl	8001084 <HAL_SYSTICK_Callback>
}
 8001080:	bf00      	nop
 8001082:	bd80      	pop	{r7, pc}

08001084 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
	...

08001094 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001094:	b480      	push	{r7}
 8001096:	b089      	sub	sp, #36	@ 0x24
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800109e:	2300      	movs	r3, #0
 80010a0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80010a2:	2300      	movs	r3, #0
 80010a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80010a6:	2300      	movs	r3, #0
 80010a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80010aa:	2300      	movs	r3, #0
 80010ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80010ae:	2300      	movs	r3, #0
 80010b0:	61fb      	str	r3, [r7, #28]
 80010b2:	e175      	b.n	80013a0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80010b4:	2201      	movs	r2, #1
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	697a      	ldr	r2, [r7, #20]
 80010c4:	4013      	ands	r3, r2
 80010c6:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	f040 8164 	bne.w	800139a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f003 0303 	and.w	r3, r3, #3
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d005      	beq.n	80010ea <HAL_GPIO_Init+0x56>
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f003 0303 	and.w	r3, r3, #3
 80010e6:	2b02      	cmp	r3, #2
 80010e8:	d130      	bne.n	800114c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	2203      	movs	r2, #3
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	43db      	mvns	r3, r3
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	4013      	ands	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	68da      	ldr	r2, [r3, #12]
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	4313      	orrs	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001120:	2201      	movs	r2, #1
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	43db      	mvns	r3, r3
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	4013      	ands	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	091b      	lsrs	r3, r3, #4
 8001136:	f003 0201 	and.w	r2, r3, #1
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	4313      	orrs	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f003 0303 	and.w	r3, r3, #3
 8001154:	2b03      	cmp	r3, #3
 8001156:	d017      	beq.n	8001188 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	2203      	movs	r2, #3
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	43db      	mvns	r3, r3
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4013      	ands	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	689a      	ldr	r2, [r3, #8]
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	4313      	orrs	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f003 0303 	and.w	r3, r3, #3
 8001190:	2b02      	cmp	r3, #2
 8001192:	d123      	bne.n	80011dc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	08da      	lsrs	r2, r3, #3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	3208      	adds	r2, #8
 800119c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	f003 0307 	and.w	r3, r3, #7
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	220f      	movs	r2, #15
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	43db      	mvns	r3, r3
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	4013      	ands	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	691a      	ldr	r2, [r3, #16]
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	f003 0307 	and.w	r3, r3, #7
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	08da      	lsrs	r2, r3, #3
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	3208      	adds	r2, #8
 80011d6:	69b9      	ldr	r1, [r7, #24]
 80011d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	2203      	movs	r2, #3
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	43db      	mvns	r3, r3
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	4013      	ands	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f003 0203 	and.w	r2, r3, #3
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	4313      	orrs	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001218:	2b00      	cmp	r3, #0
 800121a:	f000 80be 	beq.w	800139a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800121e:	4b66      	ldr	r3, [pc, #408]	@ (80013b8 <HAL_GPIO_Init+0x324>)
 8001220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001222:	4a65      	ldr	r2, [pc, #404]	@ (80013b8 <HAL_GPIO_Init+0x324>)
 8001224:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001228:	6453      	str	r3, [r2, #68]	@ 0x44
 800122a:	4b63      	ldr	r3, [pc, #396]	@ (80013b8 <HAL_GPIO_Init+0x324>)
 800122c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800122e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001236:	4a61      	ldr	r2, [pc, #388]	@ (80013bc <HAL_GPIO_Init+0x328>)
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	089b      	lsrs	r3, r3, #2
 800123c:	3302      	adds	r3, #2
 800123e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001242:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	f003 0303 	and.w	r3, r3, #3
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	220f      	movs	r2, #15
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	43db      	mvns	r3, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4013      	ands	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a58      	ldr	r2, [pc, #352]	@ (80013c0 <HAL_GPIO_Init+0x32c>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d037      	beq.n	80012d2 <HAL_GPIO_Init+0x23e>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a57      	ldr	r2, [pc, #348]	@ (80013c4 <HAL_GPIO_Init+0x330>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d031      	beq.n	80012ce <HAL_GPIO_Init+0x23a>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a56      	ldr	r2, [pc, #344]	@ (80013c8 <HAL_GPIO_Init+0x334>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d02b      	beq.n	80012ca <HAL_GPIO_Init+0x236>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a55      	ldr	r2, [pc, #340]	@ (80013cc <HAL_GPIO_Init+0x338>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d025      	beq.n	80012c6 <HAL_GPIO_Init+0x232>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a54      	ldr	r2, [pc, #336]	@ (80013d0 <HAL_GPIO_Init+0x33c>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d01f      	beq.n	80012c2 <HAL_GPIO_Init+0x22e>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a53      	ldr	r2, [pc, #332]	@ (80013d4 <HAL_GPIO_Init+0x340>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d019      	beq.n	80012be <HAL_GPIO_Init+0x22a>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a52      	ldr	r2, [pc, #328]	@ (80013d8 <HAL_GPIO_Init+0x344>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d013      	beq.n	80012ba <HAL_GPIO_Init+0x226>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a51      	ldr	r2, [pc, #324]	@ (80013dc <HAL_GPIO_Init+0x348>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d00d      	beq.n	80012b6 <HAL_GPIO_Init+0x222>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a50      	ldr	r2, [pc, #320]	@ (80013e0 <HAL_GPIO_Init+0x34c>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d007      	beq.n	80012b2 <HAL_GPIO_Init+0x21e>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a4f      	ldr	r2, [pc, #316]	@ (80013e4 <HAL_GPIO_Init+0x350>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d101      	bne.n	80012ae <HAL_GPIO_Init+0x21a>
 80012aa:	2309      	movs	r3, #9
 80012ac:	e012      	b.n	80012d4 <HAL_GPIO_Init+0x240>
 80012ae:	230a      	movs	r3, #10
 80012b0:	e010      	b.n	80012d4 <HAL_GPIO_Init+0x240>
 80012b2:	2308      	movs	r3, #8
 80012b4:	e00e      	b.n	80012d4 <HAL_GPIO_Init+0x240>
 80012b6:	2307      	movs	r3, #7
 80012b8:	e00c      	b.n	80012d4 <HAL_GPIO_Init+0x240>
 80012ba:	2306      	movs	r3, #6
 80012bc:	e00a      	b.n	80012d4 <HAL_GPIO_Init+0x240>
 80012be:	2305      	movs	r3, #5
 80012c0:	e008      	b.n	80012d4 <HAL_GPIO_Init+0x240>
 80012c2:	2304      	movs	r3, #4
 80012c4:	e006      	b.n	80012d4 <HAL_GPIO_Init+0x240>
 80012c6:	2303      	movs	r3, #3
 80012c8:	e004      	b.n	80012d4 <HAL_GPIO_Init+0x240>
 80012ca:	2302      	movs	r3, #2
 80012cc:	e002      	b.n	80012d4 <HAL_GPIO_Init+0x240>
 80012ce:	2301      	movs	r3, #1
 80012d0:	e000      	b.n	80012d4 <HAL_GPIO_Init+0x240>
 80012d2:	2300      	movs	r3, #0
 80012d4:	69fa      	ldr	r2, [r7, #28]
 80012d6:	f002 0203 	and.w	r2, r2, #3
 80012da:	0092      	lsls	r2, r2, #2
 80012dc:	4093      	lsls	r3, r2
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80012e4:	4935      	ldr	r1, [pc, #212]	@ (80013bc <HAL_GPIO_Init+0x328>)
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	089b      	lsrs	r3, r3, #2
 80012ea:	3302      	adds	r3, #2
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012f2:	4b3d      	ldr	r3, [pc, #244]	@ (80013e8 <HAL_GPIO_Init+0x354>)
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	43db      	mvns	r3, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4013      	ands	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d003      	beq.n	8001316 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	4313      	orrs	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001316:	4a34      	ldr	r2, [pc, #208]	@ (80013e8 <HAL_GPIO_Init+0x354>)
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800131c:	4b32      	ldr	r3, [pc, #200]	@ (80013e8 <HAL_GPIO_Init+0x354>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	43db      	mvns	r3, r3
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	4013      	ands	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001334:	2b00      	cmp	r3, #0
 8001336:	d003      	beq.n	8001340 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	4313      	orrs	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001340:	4a29      	ldr	r2, [pc, #164]	@ (80013e8 <HAL_GPIO_Init+0x354>)
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001346:	4b28      	ldr	r3, [pc, #160]	@ (80013e8 <HAL_GPIO_Init+0x354>)
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	43db      	mvns	r3, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4013      	ands	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d003      	beq.n	800136a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	4313      	orrs	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800136a:	4a1f      	ldr	r2, [pc, #124]	@ (80013e8 <HAL_GPIO_Init+0x354>)
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001370:	4b1d      	ldr	r3, [pc, #116]	@ (80013e8 <HAL_GPIO_Init+0x354>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	43db      	mvns	r3, r3
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	4013      	ands	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d003      	beq.n	8001394 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	4313      	orrs	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001394:	4a14      	ldr	r2, [pc, #80]	@ (80013e8 <HAL_GPIO_Init+0x354>)
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	3301      	adds	r3, #1
 800139e:	61fb      	str	r3, [r7, #28]
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	2b0f      	cmp	r3, #15
 80013a4:	f67f ae86 	bls.w	80010b4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80013a8:	bf00      	nop
 80013aa:	bf00      	nop
 80013ac:	3724      	adds	r7, #36	@ 0x24
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	40023800 	.word	0x40023800
 80013bc:	40013800 	.word	0x40013800
 80013c0:	40020000 	.word	0x40020000
 80013c4:	40020400 	.word	0x40020400
 80013c8:	40020800 	.word	0x40020800
 80013cc:	40020c00 	.word	0x40020c00
 80013d0:	40021000 	.word	0x40021000
 80013d4:	40021400 	.word	0x40021400
 80013d8:	40021800 	.word	0x40021800
 80013dc:	40021c00 	.word	0x40021c00
 80013e0:	40022000 	.word	0x40022000
 80013e4:	40022400 	.word	0x40022400
 80013e8:	40013c00 	.word	0x40013c00

080013ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	460b      	mov	r3, r1
 80013f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	691a      	ldr	r2, [r3, #16]
 80013fc:	887b      	ldrh	r3, [r7, #2]
 80013fe:	4013      	ands	r3, r2
 8001400:	2b00      	cmp	r3, #0
 8001402:	d002      	beq.n	800140a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001404:	2301      	movs	r3, #1
 8001406:	73fb      	strb	r3, [r7, #15]
 8001408:	e001      	b.n	800140e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800140a:	2300      	movs	r3, #0
 800140c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800140e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001410:	4618      	mov	r0, r3
 8001412:	3714      	adds	r7, #20
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	460b      	mov	r3, r1
 8001426:	807b      	strh	r3, [r7, #2]
 8001428:	4613      	mov	r3, r2
 800142a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800142c:	787b      	ldrb	r3, [r7, #1]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d003      	beq.n	800143a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001432:	887a      	ldrh	r2, [r7, #2]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001438:	e003      	b.n	8001442 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800143a:	887b      	ldrh	r3, [r7, #2]
 800143c:	041a      	lsls	r2, r3, #16
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	619a      	str	r2, [r3, #24]
}
 8001442:	bf00      	nop
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
	...

08001450 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001458:	2300      	movs	r3, #0
 800145a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d101      	bne.n	8001466 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e29b      	b.n	800199e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0301 	and.w	r3, r3, #1
 800146e:	2b00      	cmp	r3, #0
 8001470:	f000 8087 	beq.w	8001582 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001474:	4b96      	ldr	r3, [pc, #600]	@ (80016d0 <HAL_RCC_OscConfig+0x280>)
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	f003 030c 	and.w	r3, r3, #12
 800147c:	2b04      	cmp	r3, #4
 800147e:	d00c      	beq.n	800149a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001480:	4b93      	ldr	r3, [pc, #588]	@ (80016d0 <HAL_RCC_OscConfig+0x280>)
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	f003 030c 	and.w	r3, r3, #12
 8001488:	2b08      	cmp	r3, #8
 800148a:	d112      	bne.n	80014b2 <HAL_RCC_OscConfig+0x62>
 800148c:	4b90      	ldr	r3, [pc, #576]	@ (80016d0 <HAL_RCC_OscConfig+0x280>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001494:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001498:	d10b      	bne.n	80014b2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800149a:	4b8d      	ldr	r3, [pc, #564]	@ (80016d0 <HAL_RCC_OscConfig+0x280>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d06c      	beq.n	8001580 <HAL_RCC_OscConfig+0x130>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d168      	bne.n	8001580 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e275      	b.n	800199e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014ba:	d106      	bne.n	80014ca <HAL_RCC_OscConfig+0x7a>
 80014bc:	4b84      	ldr	r3, [pc, #528]	@ (80016d0 <HAL_RCC_OscConfig+0x280>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a83      	ldr	r2, [pc, #524]	@ (80016d0 <HAL_RCC_OscConfig+0x280>)
 80014c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014c6:	6013      	str	r3, [r2, #0]
 80014c8:	e02e      	b.n	8001528 <HAL_RCC_OscConfig+0xd8>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d10c      	bne.n	80014ec <HAL_RCC_OscConfig+0x9c>
 80014d2:	4b7f      	ldr	r3, [pc, #508]	@ (80016d0 <HAL_RCC_OscConfig+0x280>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a7e      	ldr	r2, [pc, #504]	@ (80016d0 <HAL_RCC_OscConfig+0x280>)
 80014d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014dc:	6013      	str	r3, [r2, #0]
 80014de:	4b7c      	ldr	r3, [pc, #496]	@ (80016d0 <HAL_RCC_OscConfig+0x280>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a7b      	ldr	r2, [pc, #492]	@ (80016d0 <HAL_RCC_OscConfig+0x280>)
 80014e4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014e8:	6013      	str	r3, [r2, #0]
 80014ea:	e01d      	b.n	8001528 <HAL_RCC_OscConfig+0xd8>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014f4:	d10c      	bne.n	8001510 <HAL_RCC_OscConfig+0xc0>
 80014f6:	4b76      	ldr	r3, [pc, #472]	@ (80016d0 <HAL_RCC_OscConfig+0x280>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a75      	ldr	r2, [pc, #468]	@ (80016d0 <HAL_RCC_OscConfig+0x280>)
 80014fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001500:	6013      	str	r3, [r2, #0]
 8001502:	4b73      	ldr	r3, [pc, #460]	@ (80016d0 <HAL_RCC_OscConfig+0x280>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a72      	ldr	r2, [pc, #456]	@ (80016d0 <HAL_RCC_OscConfig+0x280>)
 8001508:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800150c:	6013      	str	r3, [r2, #0]
 800150e:	e00b      	b.n	8001528 <HAL_RCC_OscConfig+0xd8>
 8001510:	4b6f      	ldr	r3, [pc, #444]	@ (80016d0 <HAL_RCC_OscConfig+0x280>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a6e      	ldr	r2, [pc, #440]	@ (80016d0 <HAL_RCC_OscConfig+0x280>)
 8001516:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800151a:	6013      	str	r3, [r2, #0]
 800151c:	4b6c      	ldr	r3, [pc, #432]	@ (80016d0 <HAL_RCC_OscConfig+0x280>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a6b      	ldr	r2, [pc, #428]	@ (80016d0 <HAL_RCC_OscConfig+0x280>)
 8001522:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001526:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d013      	beq.n	8001558 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001530:	f7ff fc94 	bl	8000e5c <HAL_GetTick>
 8001534:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001536:	e008      	b.n	800154a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001538:	f7ff fc90 	bl	8000e5c <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b64      	cmp	r3, #100	@ 0x64
 8001544:	d901      	bls.n	800154a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e229      	b.n	800199e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800154a:	4b61      	ldr	r3, [pc, #388]	@ (80016d0 <HAL_RCC_OscConfig+0x280>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d0f0      	beq.n	8001538 <HAL_RCC_OscConfig+0xe8>
 8001556:	e014      	b.n	8001582 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001558:	f7ff fc80 	bl	8000e5c <HAL_GetTick>
 800155c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800155e:	e008      	b.n	8001572 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001560:	f7ff fc7c 	bl	8000e5c <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b64      	cmp	r3, #100	@ 0x64
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e215      	b.n	800199e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001572:	4b57      	ldr	r3, [pc, #348]	@ (80016d0 <HAL_RCC_OscConfig+0x280>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d1f0      	bne.n	8001560 <HAL_RCC_OscConfig+0x110>
 800157e:	e000      	b.n	8001582 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001580:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	2b00      	cmp	r3, #0
 800158c:	d069      	beq.n	8001662 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800158e:	4b50      	ldr	r3, [pc, #320]	@ (80016d0 <HAL_RCC_OscConfig+0x280>)
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	f003 030c 	and.w	r3, r3, #12
 8001596:	2b00      	cmp	r3, #0
 8001598:	d00b      	beq.n	80015b2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800159a:	4b4d      	ldr	r3, [pc, #308]	@ (80016d0 <HAL_RCC_OscConfig+0x280>)
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	f003 030c 	and.w	r3, r3, #12
 80015a2:	2b08      	cmp	r3, #8
 80015a4:	d11c      	bne.n	80015e0 <HAL_RCC_OscConfig+0x190>
 80015a6:	4b4a      	ldr	r3, [pc, #296]	@ (80016d0 <HAL_RCC_OscConfig+0x280>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d116      	bne.n	80015e0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015b2:	4b47      	ldr	r3, [pc, #284]	@ (80016d0 <HAL_RCC_OscConfig+0x280>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d005      	beq.n	80015ca <HAL_RCC_OscConfig+0x17a>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	68db      	ldr	r3, [r3, #12]
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d001      	beq.n	80015ca <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e1e9      	b.n	800199e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ca:	4b41      	ldr	r3, [pc, #260]	@ (80016d0 <HAL_RCC_OscConfig+0x280>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	691b      	ldr	r3, [r3, #16]
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	493d      	ldr	r1, [pc, #244]	@ (80016d0 <HAL_RCC_OscConfig+0x280>)
 80015da:	4313      	orrs	r3, r2
 80015dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015de:	e040      	b.n	8001662 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d023      	beq.n	8001630 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015e8:	4b39      	ldr	r3, [pc, #228]	@ (80016d0 <HAL_RCC_OscConfig+0x280>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a38      	ldr	r2, [pc, #224]	@ (80016d0 <HAL_RCC_OscConfig+0x280>)
 80015ee:	f043 0301 	orr.w	r3, r3, #1
 80015f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f4:	f7ff fc32 	bl	8000e5c <HAL_GetTick>
 80015f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015fa:	e008      	b.n	800160e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015fc:	f7ff fc2e 	bl	8000e5c <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b02      	cmp	r3, #2
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e1c7      	b.n	800199e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800160e:	4b30      	ldr	r3, [pc, #192]	@ (80016d0 <HAL_RCC_OscConfig+0x280>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d0f0      	beq.n	80015fc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800161a:	4b2d      	ldr	r3, [pc, #180]	@ (80016d0 <HAL_RCC_OscConfig+0x280>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	691b      	ldr	r3, [r3, #16]
 8001626:	00db      	lsls	r3, r3, #3
 8001628:	4929      	ldr	r1, [pc, #164]	@ (80016d0 <HAL_RCC_OscConfig+0x280>)
 800162a:	4313      	orrs	r3, r2
 800162c:	600b      	str	r3, [r1, #0]
 800162e:	e018      	b.n	8001662 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001630:	4b27      	ldr	r3, [pc, #156]	@ (80016d0 <HAL_RCC_OscConfig+0x280>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a26      	ldr	r2, [pc, #152]	@ (80016d0 <HAL_RCC_OscConfig+0x280>)
 8001636:	f023 0301 	bic.w	r3, r3, #1
 800163a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800163c:	f7ff fc0e 	bl	8000e5c <HAL_GetTick>
 8001640:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001642:	e008      	b.n	8001656 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001644:	f7ff fc0a 	bl	8000e5c <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b02      	cmp	r3, #2
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e1a3      	b.n	800199e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001656:	4b1e      	ldr	r3, [pc, #120]	@ (80016d0 <HAL_RCC_OscConfig+0x280>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0302 	and.w	r3, r3, #2
 800165e:	2b00      	cmp	r3, #0
 8001660:	d1f0      	bne.n	8001644 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0308 	and.w	r3, r3, #8
 800166a:	2b00      	cmp	r3, #0
 800166c:	d038      	beq.n	80016e0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	695b      	ldr	r3, [r3, #20]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d019      	beq.n	80016aa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001676:	4b16      	ldr	r3, [pc, #88]	@ (80016d0 <HAL_RCC_OscConfig+0x280>)
 8001678:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800167a:	4a15      	ldr	r2, [pc, #84]	@ (80016d0 <HAL_RCC_OscConfig+0x280>)
 800167c:	f043 0301 	orr.w	r3, r3, #1
 8001680:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001682:	f7ff fbeb 	bl	8000e5c <HAL_GetTick>
 8001686:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001688:	e008      	b.n	800169c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800168a:	f7ff fbe7 	bl	8000e5c <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	2b02      	cmp	r3, #2
 8001696:	d901      	bls.n	800169c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	e180      	b.n	800199e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800169c:	4b0c      	ldr	r3, [pc, #48]	@ (80016d0 <HAL_RCC_OscConfig+0x280>)
 800169e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016a0:	f003 0302 	and.w	r3, r3, #2
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d0f0      	beq.n	800168a <HAL_RCC_OscConfig+0x23a>
 80016a8:	e01a      	b.n	80016e0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016aa:	4b09      	ldr	r3, [pc, #36]	@ (80016d0 <HAL_RCC_OscConfig+0x280>)
 80016ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016ae:	4a08      	ldr	r2, [pc, #32]	@ (80016d0 <HAL_RCC_OscConfig+0x280>)
 80016b0:	f023 0301 	bic.w	r3, r3, #1
 80016b4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016b6:	f7ff fbd1 	bl	8000e5c <HAL_GetTick>
 80016ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016bc:	e00a      	b.n	80016d4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016be:	f7ff fbcd 	bl	8000e5c <HAL_GetTick>
 80016c2:	4602      	mov	r2, r0
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d903      	bls.n	80016d4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	e166      	b.n	800199e <HAL_RCC_OscConfig+0x54e>
 80016d0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016d4:	4b92      	ldr	r3, [pc, #584]	@ (8001920 <HAL_RCC_OscConfig+0x4d0>)
 80016d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016d8:	f003 0302 	and.w	r3, r3, #2
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d1ee      	bne.n	80016be <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0304 	and.w	r3, r3, #4
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	f000 80a4 	beq.w	8001836 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016ee:	4b8c      	ldr	r3, [pc, #560]	@ (8001920 <HAL_RCC_OscConfig+0x4d0>)
 80016f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d10d      	bne.n	8001716 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80016fa:	4b89      	ldr	r3, [pc, #548]	@ (8001920 <HAL_RCC_OscConfig+0x4d0>)
 80016fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016fe:	4a88      	ldr	r2, [pc, #544]	@ (8001920 <HAL_RCC_OscConfig+0x4d0>)
 8001700:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001704:	6413      	str	r3, [r2, #64]	@ 0x40
 8001706:	4b86      	ldr	r3, [pc, #536]	@ (8001920 <HAL_RCC_OscConfig+0x4d0>)
 8001708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800170a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800170e:	60bb      	str	r3, [r7, #8]
 8001710:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001712:	2301      	movs	r3, #1
 8001714:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001716:	4b83      	ldr	r3, [pc, #524]	@ (8001924 <HAL_RCC_OscConfig+0x4d4>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800171e:	2b00      	cmp	r3, #0
 8001720:	d118      	bne.n	8001754 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001722:	4b80      	ldr	r3, [pc, #512]	@ (8001924 <HAL_RCC_OscConfig+0x4d4>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a7f      	ldr	r2, [pc, #508]	@ (8001924 <HAL_RCC_OscConfig+0x4d4>)
 8001728:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800172c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800172e:	f7ff fb95 	bl	8000e5c <HAL_GetTick>
 8001732:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001734:	e008      	b.n	8001748 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001736:	f7ff fb91 	bl	8000e5c <HAL_GetTick>
 800173a:	4602      	mov	r2, r0
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	2b64      	cmp	r3, #100	@ 0x64
 8001742:	d901      	bls.n	8001748 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	e12a      	b.n	800199e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001748:	4b76      	ldr	r3, [pc, #472]	@ (8001924 <HAL_RCC_OscConfig+0x4d4>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001750:	2b00      	cmp	r3, #0
 8001752:	d0f0      	beq.n	8001736 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d106      	bne.n	800176a <HAL_RCC_OscConfig+0x31a>
 800175c:	4b70      	ldr	r3, [pc, #448]	@ (8001920 <HAL_RCC_OscConfig+0x4d0>)
 800175e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001760:	4a6f      	ldr	r2, [pc, #444]	@ (8001920 <HAL_RCC_OscConfig+0x4d0>)
 8001762:	f043 0301 	orr.w	r3, r3, #1
 8001766:	6713      	str	r3, [r2, #112]	@ 0x70
 8001768:	e02d      	b.n	80017c6 <HAL_RCC_OscConfig+0x376>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d10c      	bne.n	800178c <HAL_RCC_OscConfig+0x33c>
 8001772:	4b6b      	ldr	r3, [pc, #428]	@ (8001920 <HAL_RCC_OscConfig+0x4d0>)
 8001774:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001776:	4a6a      	ldr	r2, [pc, #424]	@ (8001920 <HAL_RCC_OscConfig+0x4d0>)
 8001778:	f023 0301 	bic.w	r3, r3, #1
 800177c:	6713      	str	r3, [r2, #112]	@ 0x70
 800177e:	4b68      	ldr	r3, [pc, #416]	@ (8001920 <HAL_RCC_OscConfig+0x4d0>)
 8001780:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001782:	4a67      	ldr	r2, [pc, #412]	@ (8001920 <HAL_RCC_OscConfig+0x4d0>)
 8001784:	f023 0304 	bic.w	r3, r3, #4
 8001788:	6713      	str	r3, [r2, #112]	@ 0x70
 800178a:	e01c      	b.n	80017c6 <HAL_RCC_OscConfig+0x376>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	2b05      	cmp	r3, #5
 8001792:	d10c      	bne.n	80017ae <HAL_RCC_OscConfig+0x35e>
 8001794:	4b62      	ldr	r3, [pc, #392]	@ (8001920 <HAL_RCC_OscConfig+0x4d0>)
 8001796:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001798:	4a61      	ldr	r2, [pc, #388]	@ (8001920 <HAL_RCC_OscConfig+0x4d0>)
 800179a:	f043 0304 	orr.w	r3, r3, #4
 800179e:	6713      	str	r3, [r2, #112]	@ 0x70
 80017a0:	4b5f      	ldr	r3, [pc, #380]	@ (8001920 <HAL_RCC_OscConfig+0x4d0>)
 80017a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017a4:	4a5e      	ldr	r2, [pc, #376]	@ (8001920 <HAL_RCC_OscConfig+0x4d0>)
 80017a6:	f043 0301 	orr.w	r3, r3, #1
 80017aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80017ac:	e00b      	b.n	80017c6 <HAL_RCC_OscConfig+0x376>
 80017ae:	4b5c      	ldr	r3, [pc, #368]	@ (8001920 <HAL_RCC_OscConfig+0x4d0>)
 80017b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017b2:	4a5b      	ldr	r2, [pc, #364]	@ (8001920 <HAL_RCC_OscConfig+0x4d0>)
 80017b4:	f023 0301 	bic.w	r3, r3, #1
 80017b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80017ba:	4b59      	ldr	r3, [pc, #356]	@ (8001920 <HAL_RCC_OscConfig+0x4d0>)
 80017bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017be:	4a58      	ldr	r2, [pc, #352]	@ (8001920 <HAL_RCC_OscConfig+0x4d0>)
 80017c0:	f023 0304 	bic.w	r3, r3, #4
 80017c4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d015      	beq.n	80017fa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ce:	f7ff fb45 	bl	8000e5c <HAL_GetTick>
 80017d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017d4:	e00a      	b.n	80017ec <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017d6:	f7ff fb41 	bl	8000e5c <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d901      	bls.n	80017ec <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e0d8      	b.n	800199e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017ec:	4b4c      	ldr	r3, [pc, #304]	@ (8001920 <HAL_RCC_OscConfig+0x4d0>)
 80017ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017f0:	f003 0302 	and.w	r3, r3, #2
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d0ee      	beq.n	80017d6 <HAL_RCC_OscConfig+0x386>
 80017f8:	e014      	b.n	8001824 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017fa:	f7ff fb2f 	bl	8000e5c <HAL_GetTick>
 80017fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001800:	e00a      	b.n	8001818 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001802:	f7ff fb2b 	bl	8000e5c <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001810:	4293      	cmp	r3, r2
 8001812:	d901      	bls.n	8001818 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001814:	2303      	movs	r3, #3
 8001816:	e0c2      	b.n	800199e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001818:	4b41      	ldr	r3, [pc, #260]	@ (8001920 <HAL_RCC_OscConfig+0x4d0>)
 800181a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800181c:	f003 0302 	and.w	r3, r3, #2
 8001820:	2b00      	cmp	r3, #0
 8001822:	d1ee      	bne.n	8001802 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001824:	7dfb      	ldrb	r3, [r7, #23]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d105      	bne.n	8001836 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800182a:	4b3d      	ldr	r3, [pc, #244]	@ (8001920 <HAL_RCC_OscConfig+0x4d0>)
 800182c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800182e:	4a3c      	ldr	r2, [pc, #240]	@ (8001920 <HAL_RCC_OscConfig+0x4d0>)
 8001830:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001834:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	699b      	ldr	r3, [r3, #24]
 800183a:	2b00      	cmp	r3, #0
 800183c:	f000 80ae 	beq.w	800199c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001840:	4b37      	ldr	r3, [pc, #220]	@ (8001920 <HAL_RCC_OscConfig+0x4d0>)
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	f003 030c 	and.w	r3, r3, #12
 8001848:	2b08      	cmp	r3, #8
 800184a:	d06d      	beq.n	8001928 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	2b02      	cmp	r3, #2
 8001852:	d14b      	bne.n	80018ec <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001854:	4b32      	ldr	r3, [pc, #200]	@ (8001920 <HAL_RCC_OscConfig+0x4d0>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a31      	ldr	r2, [pc, #196]	@ (8001920 <HAL_RCC_OscConfig+0x4d0>)
 800185a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800185e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001860:	f7ff fafc 	bl	8000e5c <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001866:	e008      	b.n	800187a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001868:	f7ff faf8 	bl	8000e5c <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e091      	b.n	800199e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800187a:	4b29      	ldr	r3, [pc, #164]	@ (8001920 <HAL_RCC_OscConfig+0x4d0>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d1f0      	bne.n	8001868 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	69da      	ldr	r2, [r3, #28]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6a1b      	ldr	r3, [r3, #32]
 800188e:	431a      	orrs	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001894:	019b      	lsls	r3, r3, #6
 8001896:	431a      	orrs	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800189c:	085b      	lsrs	r3, r3, #1
 800189e:	3b01      	subs	r3, #1
 80018a0:	041b      	lsls	r3, r3, #16
 80018a2:	431a      	orrs	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018a8:	061b      	lsls	r3, r3, #24
 80018aa:	431a      	orrs	r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b0:	071b      	lsls	r3, r3, #28
 80018b2:	491b      	ldr	r1, [pc, #108]	@ (8001920 <HAL_RCC_OscConfig+0x4d0>)
 80018b4:	4313      	orrs	r3, r2
 80018b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018b8:	4b19      	ldr	r3, [pc, #100]	@ (8001920 <HAL_RCC_OscConfig+0x4d0>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a18      	ldr	r2, [pc, #96]	@ (8001920 <HAL_RCC_OscConfig+0x4d0>)
 80018be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c4:	f7ff faca 	bl	8000e5c <HAL_GetTick>
 80018c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018ca:	e008      	b.n	80018de <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018cc:	f7ff fac6 	bl	8000e5c <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e05f      	b.n	800199e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018de:	4b10      	ldr	r3, [pc, #64]	@ (8001920 <HAL_RCC_OscConfig+0x4d0>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d0f0      	beq.n	80018cc <HAL_RCC_OscConfig+0x47c>
 80018ea:	e057      	b.n	800199c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001920 <HAL_RCC_OscConfig+0x4d0>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a0b      	ldr	r2, [pc, #44]	@ (8001920 <HAL_RCC_OscConfig+0x4d0>)
 80018f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80018f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f8:	f7ff fab0 	bl	8000e5c <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001900:	f7ff faac 	bl	8000e5c <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e045      	b.n	800199e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001912:	4b03      	ldr	r3, [pc, #12]	@ (8001920 <HAL_RCC_OscConfig+0x4d0>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d1f0      	bne.n	8001900 <HAL_RCC_OscConfig+0x4b0>
 800191e:	e03d      	b.n	800199c <HAL_RCC_OscConfig+0x54c>
 8001920:	40023800 	.word	0x40023800
 8001924:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001928:	4b1f      	ldr	r3, [pc, #124]	@ (80019a8 <HAL_RCC_OscConfig+0x558>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	699b      	ldr	r3, [r3, #24]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d030      	beq.n	8001998 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001940:	429a      	cmp	r2, r3
 8001942:	d129      	bne.n	8001998 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800194e:	429a      	cmp	r2, r3
 8001950:	d122      	bne.n	8001998 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001952:	68fa      	ldr	r2, [r7, #12]
 8001954:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001958:	4013      	ands	r3, r2
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800195e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001960:	4293      	cmp	r3, r2
 8001962:	d119      	bne.n	8001998 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800196e:	085b      	lsrs	r3, r3, #1
 8001970:	3b01      	subs	r3, #1
 8001972:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001974:	429a      	cmp	r2, r3
 8001976:	d10f      	bne.n	8001998 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001982:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001984:	429a      	cmp	r2, r3
 8001986:	d107      	bne.n	8001998 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001992:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001994:	429a      	cmp	r2, r3
 8001996:	d001      	beq.n	800199c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e000      	b.n	800199e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3718      	adds	r7, #24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40023800 	.word	0x40023800

080019ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80019b6:	2300      	movs	r3, #0
 80019b8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d101      	bne.n	80019c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e0d0      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019c4:	4b6a      	ldr	r3, [pc, #424]	@ (8001b70 <HAL_RCC_ClockConfig+0x1c4>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 030f 	and.w	r3, r3, #15
 80019cc:	683a      	ldr	r2, [r7, #0]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d910      	bls.n	80019f4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019d2:	4b67      	ldr	r3, [pc, #412]	@ (8001b70 <HAL_RCC_ClockConfig+0x1c4>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f023 020f 	bic.w	r2, r3, #15
 80019da:	4965      	ldr	r1, [pc, #404]	@ (8001b70 <HAL_RCC_ClockConfig+0x1c4>)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	4313      	orrs	r3, r2
 80019e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019e2:	4b63      	ldr	r3, [pc, #396]	@ (8001b70 <HAL_RCC_ClockConfig+0x1c4>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 030f 	and.w	r3, r3, #15
 80019ea:	683a      	ldr	r2, [r7, #0]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d001      	beq.n	80019f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e0b8      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0302 	and.w	r3, r3, #2
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d020      	beq.n	8001a42 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0304 	and.w	r3, r3, #4
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d005      	beq.n	8001a18 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a0c:	4b59      	ldr	r3, [pc, #356]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c8>)
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	4a58      	ldr	r2, [pc, #352]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c8>)
 8001a12:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001a16:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0308 	and.w	r3, r3, #8
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d005      	beq.n	8001a30 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a24:	4b53      	ldr	r3, [pc, #332]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c8>)
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	4a52      	ldr	r2, [pc, #328]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c8>)
 8001a2a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001a2e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a30:	4b50      	ldr	r3, [pc, #320]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c8>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	494d      	ldr	r1, [pc, #308]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c8>)
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d040      	beq.n	8001ad0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d107      	bne.n	8001a66 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a56:	4b47      	ldr	r3, [pc, #284]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c8>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d115      	bne.n	8001a8e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e07f      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d107      	bne.n	8001a7e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a6e:	4b41      	ldr	r3, [pc, #260]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c8>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d109      	bne.n	8001a8e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e073      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a7e:	4b3d      	ldr	r3, [pc, #244]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c8>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d101      	bne.n	8001a8e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e06b      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a8e:	4b39      	ldr	r3, [pc, #228]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c8>)
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f023 0203 	bic.w	r2, r3, #3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	4936      	ldr	r1, [pc, #216]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c8>)
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001aa0:	f7ff f9dc 	bl	8000e5c <HAL_GetTick>
 8001aa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aa6:	e00a      	b.n	8001abe <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aa8:	f7ff f9d8 	bl	8000e5c <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e053      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001abe:	4b2d      	ldr	r3, [pc, #180]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c8>)
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f003 020c 	and.w	r2, r3, #12
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d1eb      	bne.n	8001aa8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ad0:	4b27      	ldr	r3, [pc, #156]	@ (8001b70 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 030f 	and.w	r3, r3, #15
 8001ad8:	683a      	ldr	r2, [r7, #0]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d210      	bcs.n	8001b00 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ade:	4b24      	ldr	r3, [pc, #144]	@ (8001b70 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f023 020f 	bic.w	r2, r3, #15
 8001ae6:	4922      	ldr	r1, [pc, #136]	@ (8001b70 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aee:	4b20      	ldr	r3, [pc, #128]	@ (8001b70 <HAL_RCC_ClockConfig+0x1c4>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 030f 	and.w	r3, r3, #15
 8001af6:	683a      	ldr	r2, [r7, #0]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d001      	beq.n	8001b00 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e032      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0304 	and.w	r3, r3, #4
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d008      	beq.n	8001b1e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b0c:	4b19      	ldr	r3, [pc, #100]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c8>)
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	4916      	ldr	r1, [pc, #88]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c8>)
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0308 	and.w	r3, r3, #8
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d009      	beq.n	8001b3e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b2a:	4b12      	ldr	r3, [pc, #72]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c8>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	691b      	ldr	r3, [r3, #16]
 8001b36:	00db      	lsls	r3, r3, #3
 8001b38:	490e      	ldr	r1, [pc, #56]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c8>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b3e:	f000 f821 	bl	8001b84 <HAL_RCC_GetSysClockFreq>
 8001b42:	4602      	mov	r2, r0
 8001b44:	4b0b      	ldr	r3, [pc, #44]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c8>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	091b      	lsrs	r3, r3, #4
 8001b4a:	f003 030f 	and.w	r3, r3, #15
 8001b4e:	490a      	ldr	r1, [pc, #40]	@ (8001b78 <HAL_RCC_ClockConfig+0x1cc>)
 8001b50:	5ccb      	ldrb	r3, [r1, r3]
 8001b52:	fa22 f303 	lsr.w	r3, r2, r3
 8001b56:	4a09      	ldr	r2, [pc, #36]	@ (8001b7c <HAL_RCC_ClockConfig+0x1d0>)
 8001b58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b5a:	4b09      	ldr	r3, [pc, #36]	@ (8001b80 <HAL_RCC_ClockConfig+0x1d4>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff f938 	bl	8000dd4 <HAL_InitTick>

  return HAL_OK;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40023c00 	.word	0x40023c00
 8001b74:	40023800 	.word	0x40023800
 8001b78:	08003500 	.word	0x08003500
 8001b7c:	20000000 	.word	0x20000000
 8001b80:	20000004 	.word	0x20000004

08001b84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b88:	b090      	sub	sp, #64	@ 0x40
 8001b8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b90:	2300      	movs	r3, #0
 8001b92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b94:	2300      	movs	r3, #0
 8001b96:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b9c:	4b59      	ldr	r3, [pc, #356]	@ (8001d04 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f003 030c 	and.w	r3, r3, #12
 8001ba4:	2b08      	cmp	r3, #8
 8001ba6:	d00d      	beq.n	8001bc4 <HAL_RCC_GetSysClockFreq+0x40>
 8001ba8:	2b08      	cmp	r3, #8
 8001baa:	f200 80a1 	bhi.w	8001cf0 <HAL_RCC_GetSysClockFreq+0x16c>
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d002      	beq.n	8001bb8 <HAL_RCC_GetSysClockFreq+0x34>
 8001bb2:	2b04      	cmp	r3, #4
 8001bb4:	d003      	beq.n	8001bbe <HAL_RCC_GetSysClockFreq+0x3a>
 8001bb6:	e09b      	b.n	8001cf0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bb8:	4b53      	ldr	r3, [pc, #332]	@ (8001d08 <HAL_RCC_GetSysClockFreq+0x184>)
 8001bba:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001bbc:	e09b      	b.n	8001cf6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bbe:	4b53      	ldr	r3, [pc, #332]	@ (8001d0c <HAL_RCC_GetSysClockFreq+0x188>)
 8001bc0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001bc2:	e098      	b.n	8001cf6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bc4:	4b4f      	ldr	r3, [pc, #316]	@ (8001d04 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001bcc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001bce:	4b4d      	ldr	r3, [pc, #308]	@ (8001d04 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d028      	beq.n	8001c2c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bda:	4b4a      	ldr	r3, [pc, #296]	@ (8001d04 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	099b      	lsrs	r3, r3, #6
 8001be0:	2200      	movs	r2, #0
 8001be2:	623b      	str	r3, [r7, #32]
 8001be4:	627a      	str	r2, [r7, #36]	@ 0x24
 8001be6:	6a3b      	ldr	r3, [r7, #32]
 8001be8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001bec:	2100      	movs	r1, #0
 8001bee:	4b47      	ldr	r3, [pc, #284]	@ (8001d0c <HAL_RCC_GetSysClockFreq+0x188>)
 8001bf0:	fb03 f201 	mul.w	r2, r3, r1
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	fb00 f303 	mul.w	r3, r0, r3
 8001bfa:	4413      	add	r3, r2
 8001bfc:	4a43      	ldr	r2, [pc, #268]	@ (8001d0c <HAL_RCC_GetSysClockFreq+0x188>)
 8001bfe:	fba0 1202 	umull	r1, r2, r0, r2
 8001c02:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001c04:	460a      	mov	r2, r1
 8001c06:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001c08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c0a:	4413      	add	r3, r2
 8001c0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c10:	2200      	movs	r2, #0
 8001c12:	61bb      	str	r3, [r7, #24]
 8001c14:	61fa      	str	r2, [r7, #28]
 8001c16:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c1a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001c1e:	f7fe fb67 	bl	80002f0 <__aeabi_uldivmod>
 8001c22:	4602      	mov	r2, r0
 8001c24:	460b      	mov	r3, r1
 8001c26:	4613      	mov	r3, r2
 8001c28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001c2a:	e053      	b.n	8001cd4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c2c:	4b35      	ldr	r3, [pc, #212]	@ (8001d04 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	099b      	lsrs	r3, r3, #6
 8001c32:	2200      	movs	r2, #0
 8001c34:	613b      	str	r3, [r7, #16]
 8001c36:	617a      	str	r2, [r7, #20]
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001c3e:	f04f 0b00 	mov.w	fp, #0
 8001c42:	4652      	mov	r2, sl
 8001c44:	465b      	mov	r3, fp
 8001c46:	f04f 0000 	mov.w	r0, #0
 8001c4a:	f04f 0100 	mov.w	r1, #0
 8001c4e:	0159      	lsls	r1, r3, #5
 8001c50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c54:	0150      	lsls	r0, r2, #5
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	ebb2 080a 	subs.w	r8, r2, sl
 8001c5e:	eb63 090b 	sbc.w	r9, r3, fp
 8001c62:	f04f 0200 	mov.w	r2, #0
 8001c66:	f04f 0300 	mov.w	r3, #0
 8001c6a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001c6e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001c72:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001c76:	ebb2 0408 	subs.w	r4, r2, r8
 8001c7a:	eb63 0509 	sbc.w	r5, r3, r9
 8001c7e:	f04f 0200 	mov.w	r2, #0
 8001c82:	f04f 0300 	mov.w	r3, #0
 8001c86:	00eb      	lsls	r3, r5, #3
 8001c88:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c8c:	00e2      	lsls	r2, r4, #3
 8001c8e:	4614      	mov	r4, r2
 8001c90:	461d      	mov	r5, r3
 8001c92:	eb14 030a 	adds.w	r3, r4, sl
 8001c96:	603b      	str	r3, [r7, #0]
 8001c98:	eb45 030b 	adc.w	r3, r5, fp
 8001c9c:	607b      	str	r3, [r7, #4]
 8001c9e:	f04f 0200 	mov.w	r2, #0
 8001ca2:	f04f 0300 	mov.w	r3, #0
 8001ca6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001caa:	4629      	mov	r1, r5
 8001cac:	028b      	lsls	r3, r1, #10
 8001cae:	4621      	mov	r1, r4
 8001cb0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001cb4:	4621      	mov	r1, r4
 8001cb6:	028a      	lsls	r2, r1, #10
 8001cb8:	4610      	mov	r0, r2
 8001cba:	4619      	mov	r1, r3
 8001cbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	60bb      	str	r3, [r7, #8]
 8001cc2:	60fa      	str	r2, [r7, #12]
 8001cc4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001cc8:	f7fe fb12 	bl	80002f0 <__aeabi_uldivmod>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	460b      	mov	r3, r1
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001cd4:	4b0b      	ldr	r3, [pc, #44]	@ (8001d04 <HAL_RCC_GetSysClockFreq+0x180>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	0c1b      	lsrs	r3, r3, #16
 8001cda:	f003 0303 	and.w	r3, r3, #3
 8001cde:	3301      	adds	r3, #1
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001ce4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cec:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001cee:	e002      	b.n	8001cf6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cf0:	4b05      	ldr	r3, [pc, #20]	@ (8001d08 <HAL_RCC_GetSysClockFreq+0x184>)
 8001cf2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001cf4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3740      	adds	r7, #64	@ 0x40
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d02:	bf00      	nop
 8001d04:	40023800 	.word	0x40023800
 8001d08:	00f42400 	.word	0x00f42400
 8001d0c:	017d7840 	.word	0x017d7840

08001d10 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d14:	4b03      	ldr	r3, [pc, #12]	@ (8001d24 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d16:	681b      	ldr	r3, [r3, #0]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	20000000 	.word	0x20000000

08001d28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d2c:	f7ff fff0 	bl	8001d10 <HAL_RCC_GetHCLKFreq>
 8001d30:	4602      	mov	r2, r0
 8001d32:	4b05      	ldr	r3, [pc, #20]	@ (8001d48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	0a9b      	lsrs	r3, r3, #10
 8001d38:	f003 0307 	and.w	r3, r3, #7
 8001d3c:	4903      	ldr	r1, [pc, #12]	@ (8001d4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d3e:	5ccb      	ldrb	r3, [r1, r3]
 8001d40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	08003510 	.word	0x08003510

08001d50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d54:	f7ff ffdc 	bl	8001d10 <HAL_RCC_GetHCLKFreq>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	4b05      	ldr	r3, [pc, #20]	@ (8001d70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	0b5b      	lsrs	r3, r3, #13
 8001d60:	f003 0307 	and.w	r3, r3, #7
 8001d64:	4903      	ldr	r1, [pc, #12]	@ (8001d74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d66:	5ccb      	ldrb	r3, [r1, r3]
 8001d68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40023800 	.word	0x40023800
 8001d74:	08003510 	.word	0x08003510

08001d78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d101      	bne.n	8001d8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e049      	b.n	8001e1e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d106      	bne.n	8001da4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f000 f841 	bl	8001e26 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2202      	movs	r2, #2
 8001da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	3304      	adds	r3, #4
 8001db4:	4619      	mov	r1, r3
 8001db6:	4610      	mov	r0, r2
 8001db8:	f000 f8b0 	bl	8001f1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2201      	movs	r2, #1
 8001de0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2201      	movs	r2, #1
 8001e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e26:	b480      	push	{r7}
 8001e28:	b083      	sub	sp, #12
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e2e:	bf00      	nop
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
	...

08001e3c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b085      	sub	sp, #20
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d001      	beq.n	8001e54 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e04c      	b.n	8001eee <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2202      	movs	r2, #2
 8001e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a26      	ldr	r2, [pc, #152]	@ (8001efc <HAL_TIM_Base_Start+0xc0>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d022      	beq.n	8001eac <HAL_TIM_Base_Start+0x70>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e6e:	d01d      	beq.n	8001eac <HAL_TIM_Base_Start+0x70>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a22      	ldr	r2, [pc, #136]	@ (8001f00 <HAL_TIM_Base_Start+0xc4>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d018      	beq.n	8001eac <HAL_TIM_Base_Start+0x70>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a21      	ldr	r2, [pc, #132]	@ (8001f04 <HAL_TIM_Base_Start+0xc8>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d013      	beq.n	8001eac <HAL_TIM_Base_Start+0x70>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a1f      	ldr	r2, [pc, #124]	@ (8001f08 <HAL_TIM_Base_Start+0xcc>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d00e      	beq.n	8001eac <HAL_TIM_Base_Start+0x70>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a1e      	ldr	r2, [pc, #120]	@ (8001f0c <HAL_TIM_Base_Start+0xd0>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d009      	beq.n	8001eac <HAL_TIM_Base_Start+0x70>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a1c      	ldr	r2, [pc, #112]	@ (8001f10 <HAL_TIM_Base_Start+0xd4>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d004      	beq.n	8001eac <HAL_TIM_Base_Start+0x70>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a1b      	ldr	r2, [pc, #108]	@ (8001f14 <HAL_TIM_Base_Start+0xd8>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d115      	bne.n	8001ed8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	689a      	ldr	r2, [r3, #8]
 8001eb2:	4b19      	ldr	r3, [pc, #100]	@ (8001f18 <HAL_TIM_Base_Start+0xdc>)
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2b06      	cmp	r3, #6
 8001ebc:	d015      	beq.n	8001eea <HAL_TIM_Base_Start+0xae>
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ec4:	d011      	beq.n	8001eea <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f042 0201 	orr.w	r2, r2, #1
 8001ed4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ed6:	e008      	b.n	8001eea <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f042 0201 	orr.w	r2, r2, #1
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	e000      	b.n	8001eec <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3714      	adds	r7, #20
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	40010000 	.word	0x40010000
 8001f00:	40000400 	.word	0x40000400
 8001f04:	40000800 	.word	0x40000800
 8001f08:	40000c00 	.word	0x40000c00
 8001f0c:	40010400 	.word	0x40010400
 8001f10:	40014000 	.word	0x40014000
 8001f14:	40001800 	.word	0x40001800
 8001f18:	00010007 	.word	0x00010007

08001f1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4a46      	ldr	r2, [pc, #280]	@ (8002048 <TIM_Base_SetConfig+0x12c>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d013      	beq.n	8001f5c <TIM_Base_SetConfig+0x40>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f3a:	d00f      	beq.n	8001f5c <TIM_Base_SetConfig+0x40>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4a43      	ldr	r2, [pc, #268]	@ (800204c <TIM_Base_SetConfig+0x130>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d00b      	beq.n	8001f5c <TIM_Base_SetConfig+0x40>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4a42      	ldr	r2, [pc, #264]	@ (8002050 <TIM_Base_SetConfig+0x134>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d007      	beq.n	8001f5c <TIM_Base_SetConfig+0x40>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4a41      	ldr	r2, [pc, #260]	@ (8002054 <TIM_Base_SetConfig+0x138>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d003      	beq.n	8001f5c <TIM_Base_SetConfig+0x40>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4a40      	ldr	r2, [pc, #256]	@ (8002058 <TIM_Base_SetConfig+0x13c>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d108      	bne.n	8001f6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	68fa      	ldr	r2, [r7, #12]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a35      	ldr	r2, [pc, #212]	@ (8002048 <TIM_Base_SetConfig+0x12c>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d02b      	beq.n	8001fce <TIM_Base_SetConfig+0xb2>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f7c:	d027      	beq.n	8001fce <TIM_Base_SetConfig+0xb2>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a32      	ldr	r2, [pc, #200]	@ (800204c <TIM_Base_SetConfig+0x130>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d023      	beq.n	8001fce <TIM_Base_SetConfig+0xb2>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a31      	ldr	r2, [pc, #196]	@ (8002050 <TIM_Base_SetConfig+0x134>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d01f      	beq.n	8001fce <TIM_Base_SetConfig+0xb2>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a30      	ldr	r2, [pc, #192]	@ (8002054 <TIM_Base_SetConfig+0x138>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d01b      	beq.n	8001fce <TIM_Base_SetConfig+0xb2>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a2f      	ldr	r2, [pc, #188]	@ (8002058 <TIM_Base_SetConfig+0x13c>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d017      	beq.n	8001fce <TIM_Base_SetConfig+0xb2>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a2e      	ldr	r2, [pc, #184]	@ (800205c <TIM_Base_SetConfig+0x140>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d013      	beq.n	8001fce <TIM_Base_SetConfig+0xb2>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a2d      	ldr	r2, [pc, #180]	@ (8002060 <TIM_Base_SetConfig+0x144>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d00f      	beq.n	8001fce <TIM_Base_SetConfig+0xb2>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a2c      	ldr	r2, [pc, #176]	@ (8002064 <TIM_Base_SetConfig+0x148>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d00b      	beq.n	8001fce <TIM_Base_SetConfig+0xb2>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a2b      	ldr	r2, [pc, #172]	@ (8002068 <TIM_Base_SetConfig+0x14c>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d007      	beq.n	8001fce <TIM_Base_SetConfig+0xb2>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a2a      	ldr	r2, [pc, #168]	@ (800206c <TIM_Base_SetConfig+0x150>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d003      	beq.n	8001fce <TIM_Base_SetConfig+0xb2>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a29      	ldr	r2, [pc, #164]	@ (8002070 <TIM_Base_SetConfig+0x154>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d108      	bne.n	8001fe0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001fd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	695b      	ldr	r3, [r3, #20]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	68fa      	ldr	r2, [r7, #12]
 8001ff2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	689a      	ldr	r2, [r3, #8]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4a10      	ldr	r2, [pc, #64]	@ (8002048 <TIM_Base_SetConfig+0x12c>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d003      	beq.n	8002014 <TIM_Base_SetConfig+0xf8>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a12      	ldr	r2, [pc, #72]	@ (8002058 <TIM_Base_SetConfig+0x13c>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d103      	bne.n	800201c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	691a      	ldr	r2, [r3, #16]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	2b01      	cmp	r3, #1
 800202c:	d105      	bne.n	800203a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	f023 0201 	bic.w	r2, r3, #1
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	611a      	str	r2, [r3, #16]
  }
}
 800203a:	bf00      	nop
 800203c:	3714      	adds	r7, #20
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	40010000 	.word	0x40010000
 800204c:	40000400 	.word	0x40000400
 8002050:	40000800 	.word	0x40000800
 8002054:	40000c00 	.word	0x40000c00
 8002058:	40010400 	.word	0x40010400
 800205c:	40014000 	.word	0x40014000
 8002060:	40014400 	.word	0x40014400
 8002064:	40014800 	.word	0x40014800
 8002068:	40001800 	.word	0x40001800
 800206c:	40001c00 	.word	0x40001c00
 8002070:	40002000 	.word	0x40002000

08002074 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d101      	bne.n	8002086 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e040      	b.n	8002108 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800208a:	2b00      	cmp	r3, #0
 800208c:	d106      	bne.n	800209c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f7fe fe2c 	bl	8000cf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2224      	movs	r2, #36	@ 0x24
 80020a0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f022 0201 	bic.w	r2, r2, #1
 80020b0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d002      	beq.n	80020c0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 fb16 	bl	80026ec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f000 f8af 	bl	8002224 <UART_SetConfig>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d101      	bne.n	80020d0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e01b      	b.n	8002108 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	685a      	ldr	r2, [r3, #4]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80020de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	689a      	ldr	r2, [r3, #8]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80020ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f042 0201 	orr.w	r2, r2, #1
 80020fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f000 fb95 	bl	8002830 <UART_CheckIdleState>
 8002106:	4603      	mov	r3, r0
}
 8002108:	4618      	mov	r0, r3
 800210a:	3708      	adds	r7, #8
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b08a      	sub	sp, #40	@ 0x28
 8002114:	af02      	add	r7, sp, #8
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	603b      	str	r3, [r7, #0]
 800211c:	4613      	mov	r3, r2
 800211e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002124:	2b20      	cmp	r3, #32
 8002126:	d177      	bne.n	8002218 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d002      	beq.n	8002134 <HAL_UART_Transmit+0x24>
 800212e:	88fb      	ldrh	r3, [r7, #6]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d101      	bne.n	8002138 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e070      	b.n	800221a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2200      	movs	r2, #0
 800213c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2221      	movs	r2, #33	@ 0x21
 8002144:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002146:	f7fe fe89 	bl	8000e5c <HAL_GetTick>
 800214a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	88fa      	ldrh	r2, [r7, #6]
 8002150:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	88fa      	ldrh	r2, [r7, #6]
 8002158:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002164:	d108      	bne.n	8002178 <HAL_UART_Transmit+0x68>
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d104      	bne.n	8002178 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800216e:	2300      	movs	r3, #0
 8002170:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	61bb      	str	r3, [r7, #24]
 8002176:	e003      	b.n	8002180 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800217c:	2300      	movs	r3, #0
 800217e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002180:	e02f      	b.n	80021e2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	9300      	str	r3, [sp, #0]
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	2200      	movs	r2, #0
 800218a:	2180      	movs	r1, #128	@ 0x80
 800218c:	68f8      	ldr	r0, [r7, #12]
 800218e:	f000 fbf7 	bl	8002980 <UART_WaitOnFlagUntilTimeout>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d004      	beq.n	80021a2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2220      	movs	r2, #32
 800219c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e03b      	b.n	800221a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d10b      	bne.n	80021c0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	881b      	ldrh	r3, [r3, #0]
 80021ac:	461a      	mov	r2, r3
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80021b6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	3302      	adds	r3, #2
 80021bc:	61bb      	str	r3, [r7, #24]
 80021be:	e007      	b.n	80021d0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	781a      	ldrb	r2, [r3, #0]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	3301      	adds	r3, #1
 80021ce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	3b01      	subs	r3, #1
 80021da:	b29a      	uxth	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1c9      	bne.n	8002182 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	9300      	str	r3, [sp, #0]
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	2200      	movs	r2, #0
 80021f6:	2140      	movs	r1, #64	@ 0x40
 80021f8:	68f8      	ldr	r0, [r7, #12]
 80021fa:	f000 fbc1 	bl	8002980 <UART_WaitOnFlagUntilTimeout>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d004      	beq.n	800220e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2220      	movs	r2, #32
 8002208:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e005      	b.n	800221a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2220      	movs	r2, #32
 8002212:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002214:	2300      	movs	r3, #0
 8002216:	e000      	b.n	800221a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002218:	2302      	movs	r3, #2
  }
}
 800221a:	4618      	mov	r0, r3
 800221c:	3720      	adds	r7, #32
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
	...

08002224 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b088      	sub	sp, #32
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800222c:	2300      	movs	r3, #0
 800222e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	691b      	ldr	r3, [r3, #16]
 8002238:	431a      	orrs	r2, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	695b      	ldr	r3, [r3, #20]
 800223e:	431a      	orrs	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	69db      	ldr	r3, [r3, #28]
 8002244:	4313      	orrs	r3, r2
 8002246:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	4ba6      	ldr	r3, [pc, #664]	@ (80024e8 <UART_SetConfig+0x2c4>)
 8002250:	4013      	ands	r3, r2
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	6812      	ldr	r2, [r2, #0]
 8002256:	6979      	ldr	r1, [r7, #20]
 8002258:	430b      	orrs	r3, r1
 800225a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	68da      	ldr	r2, [r3, #12]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	430a      	orrs	r2, r1
 8002270:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	699b      	ldr	r3, [r3, #24]
 8002276:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a1b      	ldr	r3, [r3, #32]
 800227c:	697a      	ldr	r2, [r7, #20]
 800227e:	4313      	orrs	r3, r2
 8002280:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	697a      	ldr	r2, [r7, #20]
 8002292:	430a      	orrs	r2, r1
 8002294:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a94      	ldr	r2, [pc, #592]	@ (80024ec <UART_SetConfig+0x2c8>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d120      	bne.n	80022e2 <UART_SetConfig+0xbe>
 80022a0:	4b93      	ldr	r3, [pc, #588]	@ (80024f0 <UART_SetConfig+0x2cc>)
 80022a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022a6:	f003 0303 	and.w	r3, r3, #3
 80022aa:	2b03      	cmp	r3, #3
 80022ac:	d816      	bhi.n	80022dc <UART_SetConfig+0xb8>
 80022ae:	a201      	add	r2, pc, #4	@ (adr r2, 80022b4 <UART_SetConfig+0x90>)
 80022b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022b4:	080022c5 	.word	0x080022c5
 80022b8:	080022d1 	.word	0x080022d1
 80022bc:	080022cb 	.word	0x080022cb
 80022c0:	080022d7 	.word	0x080022d7
 80022c4:	2301      	movs	r3, #1
 80022c6:	77fb      	strb	r3, [r7, #31]
 80022c8:	e150      	b.n	800256c <UART_SetConfig+0x348>
 80022ca:	2302      	movs	r3, #2
 80022cc:	77fb      	strb	r3, [r7, #31]
 80022ce:	e14d      	b.n	800256c <UART_SetConfig+0x348>
 80022d0:	2304      	movs	r3, #4
 80022d2:	77fb      	strb	r3, [r7, #31]
 80022d4:	e14a      	b.n	800256c <UART_SetConfig+0x348>
 80022d6:	2308      	movs	r3, #8
 80022d8:	77fb      	strb	r3, [r7, #31]
 80022da:	e147      	b.n	800256c <UART_SetConfig+0x348>
 80022dc:	2310      	movs	r3, #16
 80022de:	77fb      	strb	r3, [r7, #31]
 80022e0:	e144      	b.n	800256c <UART_SetConfig+0x348>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a83      	ldr	r2, [pc, #524]	@ (80024f4 <UART_SetConfig+0x2d0>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d132      	bne.n	8002352 <UART_SetConfig+0x12e>
 80022ec:	4b80      	ldr	r3, [pc, #512]	@ (80024f0 <UART_SetConfig+0x2cc>)
 80022ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022f2:	f003 030c 	and.w	r3, r3, #12
 80022f6:	2b0c      	cmp	r3, #12
 80022f8:	d828      	bhi.n	800234c <UART_SetConfig+0x128>
 80022fa:	a201      	add	r2, pc, #4	@ (adr r2, 8002300 <UART_SetConfig+0xdc>)
 80022fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002300:	08002335 	.word	0x08002335
 8002304:	0800234d 	.word	0x0800234d
 8002308:	0800234d 	.word	0x0800234d
 800230c:	0800234d 	.word	0x0800234d
 8002310:	08002341 	.word	0x08002341
 8002314:	0800234d 	.word	0x0800234d
 8002318:	0800234d 	.word	0x0800234d
 800231c:	0800234d 	.word	0x0800234d
 8002320:	0800233b 	.word	0x0800233b
 8002324:	0800234d 	.word	0x0800234d
 8002328:	0800234d 	.word	0x0800234d
 800232c:	0800234d 	.word	0x0800234d
 8002330:	08002347 	.word	0x08002347
 8002334:	2300      	movs	r3, #0
 8002336:	77fb      	strb	r3, [r7, #31]
 8002338:	e118      	b.n	800256c <UART_SetConfig+0x348>
 800233a:	2302      	movs	r3, #2
 800233c:	77fb      	strb	r3, [r7, #31]
 800233e:	e115      	b.n	800256c <UART_SetConfig+0x348>
 8002340:	2304      	movs	r3, #4
 8002342:	77fb      	strb	r3, [r7, #31]
 8002344:	e112      	b.n	800256c <UART_SetConfig+0x348>
 8002346:	2308      	movs	r3, #8
 8002348:	77fb      	strb	r3, [r7, #31]
 800234a:	e10f      	b.n	800256c <UART_SetConfig+0x348>
 800234c:	2310      	movs	r3, #16
 800234e:	77fb      	strb	r3, [r7, #31]
 8002350:	e10c      	b.n	800256c <UART_SetConfig+0x348>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a68      	ldr	r2, [pc, #416]	@ (80024f8 <UART_SetConfig+0x2d4>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d120      	bne.n	800239e <UART_SetConfig+0x17a>
 800235c:	4b64      	ldr	r3, [pc, #400]	@ (80024f0 <UART_SetConfig+0x2cc>)
 800235e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002362:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002366:	2b30      	cmp	r3, #48	@ 0x30
 8002368:	d013      	beq.n	8002392 <UART_SetConfig+0x16e>
 800236a:	2b30      	cmp	r3, #48	@ 0x30
 800236c:	d814      	bhi.n	8002398 <UART_SetConfig+0x174>
 800236e:	2b20      	cmp	r3, #32
 8002370:	d009      	beq.n	8002386 <UART_SetConfig+0x162>
 8002372:	2b20      	cmp	r3, #32
 8002374:	d810      	bhi.n	8002398 <UART_SetConfig+0x174>
 8002376:	2b00      	cmp	r3, #0
 8002378:	d002      	beq.n	8002380 <UART_SetConfig+0x15c>
 800237a:	2b10      	cmp	r3, #16
 800237c:	d006      	beq.n	800238c <UART_SetConfig+0x168>
 800237e:	e00b      	b.n	8002398 <UART_SetConfig+0x174>
 8002380:	2300      	movs	r3, #0
 8002382:	77fb      	strb	r3, [r7, #31]
 8002384:	e0f2      	b.n	800256c <UART_SetConfig+0x348>
 8002386:	2302      	movs	r3, #2
 8002388:	77fb      	strb	r3, [r7, #31]
 800238a:	e0ef      	b.n	800256c <UART_SetConfig+0x348>
 800238c:	2304      	movs	r3, #4
 800238e:	77fb      	strb	r3, [r7, #31]
 8002390:	e0ec      	b.n	800256c <UART_SetConfig+0x348>
 8002392:	2308      	movs	r3, #8
 8002394:	77fb      	strb	r3, [r7, #31]
 8002396:	e0e9      	b.n	800256c <UART_SetConfig+0x348>
 8002398:	2310      	movs	r3, #16
 800239a:	77fb      	strb	r3, [r7, #31]
 800239c:	e0e6      	b.n	800256c <UART_SetConfig+0x348>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a56      	ldr	r2, [pc, #344]	@ (80024fc <UART_SetConfig+0x2d8>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d120      	bne.n	80023ea <UART_SetConfig+0x1c6>
 80023a8:	4b51      	ldr	r3, [pc, #324]	@ (80024f0 <UART_SetConfig+0x2cc>)
 80023aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023ae:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80023b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80023b4:	d013      	beq.n	80023de <UART_SetConfig+0x1ba>
 80023b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80023b8:	d814      	bhi.n	80023e4 <UART_SetConfig+0x1c0>
 80023ba:	2b80      	cmp	r3, #128	@ 0x80
 80023bc:	d009      	beq.n	80023d2 <UART_SetConfig+0x1ae>
 80023be:	2b80      	cmp	r3, #128	@ 0x80
 80023c0:	d810      	bhi.n	80023e4 <UART_SetConfig+0x1c0>
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d002      	beq.n	80023cc <UART_SetConfig+0x1a8>
 80023c6:	2b40      	cmp	r3, #64	@ 0x40
 80023c8:	d006      	beq.n	80023d8 <UART_SetConfig+0x1b4>
 80023ca:	e00b      	b.n	80023e4 <UART_SetConfig+0x1c0>
 80023cc:	2300      	movs	r3, #0
 80023ce:	77fb      	strb	r3, [r7, #31]
 80023d0:	e0cc      	b.n	800256c <UART_SetConfig+0x348>
 80023d2:	2302      	movs	r3, #2
 80023d4:	77fb      	strb	r3, [r7, #31]
 80023d6:	e0c9      	b.n	800256c <UART_SetConfig+0x348>
 80023d8:	2304      	movs	r3, #4
 80023da:	77fb      	strb	r3, [r7, #31]
 80023dc:	e0c6      	b.n	800256c <UART_SetConfig+0x348>
 80023de:	2308      	movs	r3, #8
 80023e0:	77fb      	strb	r3, [r7, #31]
 80023e2:	e0c3      	b.n	800256c <UART_SetConfig+0x348>
 80023e4:	2310      	movs	r3, #16
 80023e6:	77fb      	strb	r3, [r7, #31]
 80023e8:	e0c0      	b.n	800256c <UART_SetConfig+0x348>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a44      	ldr	r2, [pc, #272]	@ (8002500 <UART_SetConfig+0x2dc>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d125      	bne.n	8002440 <UART_SetConfig+0x21c>
 80023f4:	4b3e      	ldr	r3, [pc, #248]	@ (80024f0 <UART_SetConfig+0x2cc>)
 80023f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80023fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002402:	d017      	beq.n	8002434 <UART_SetConfig+0x210>
 8002404:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002408:	d817      	bhi.n	800243a <UART_SetConfig+0x216>
 800240a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800240e:	d00b      	beq.n	8002428 <UART_SetConfig+0x204>
 8002410:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002414:	d811      	bhi.n	800243a <UART_SetConfig+0x216>
 8002416:	2b00      	cmp	r3, #0
 8002418:	d003      	beq.n	8002422 <UART_SetConfig+0x1fe>
 800241a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800241e:	d006      	beq.n	800242e <UART_SetConfig+0x20a>
 8002420:	e00b      	b.n	800243a <UART_SetConfig+0x216>
 8002422:	2300      	movs	r3, #0
 8002424:	77fb      	strb	r3, [r7, #31]
 8002426:	e0a1      	b.n	800256c <UART_SetConfig+0x348>
 8002428:	2302      	movs	r3, #2
 800242a:	77fb      	strb	r3, [r7, #31]
 800242c:	e09e      	b.n	800256c <UART_SetConfig+0x348>
 800242e:	2304      	movs	r3, #4
 8002430:	77fb      	strb	r3, [r7, #31]
 8002432:	e09b      	b.n	800256c <UART_SetConfig+0x348>
 8002434:	2308      	movs	r3, #8
 8002436:	77fb      	strb	r3, [r7, #31]
 8002438:	e098      	b.n	800256c <UART_SetConfig+0x348>
 800243a:	2310      	movs	r3, #16
 800243c:	77fb      	strb	r3, [r7, #31]
 800243e:	e095      	b.n	800256c <UART_SetConfig+0x348>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a2f      	ldr	r2, [pc, #188]	@ (8002504 <UART_SetConfig+0x2e0>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d125      	bne.n	8002496 <UART_SetConfig+0x272>
 800244a:	4b29      	ldr	r3, [pc, #164]	@ (80024f0 <UART_SetConfig+0x2cc>)
 800244c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002450:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002454:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002458:	d017      	beq.n	800248a <UART_SetConfig+0x266>
 800245a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800245e:	d817      	bhi.n	8002490 <UART_SetConfig+0x26c>
 8002460:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002464:	d00b      	beq.n	800247e <UART_SetConfig+0x25a>
 8002466:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800246a:	d811      	bhi.n	8002490 <UART_SetConfig+0x26c>
 800246c:	2b00      	cmp	r3, #0
 800246e:	d003      	beq.n	8002478 <UART_SetConfig+0x254>
 8002470:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002474:	d006      	beq.n	8002484 <UART_SetConfig+0x260>
 8002476:	e00b      	b.n	8002490 <UART_SetConfig+0x26c>
 8002478:	2301      	movs	r3, #1
 800247a:	77fb      	strb	r3, [r7, #31]
 800247c:	e076      	b.n	800256c <UART_SetConfig+0x348>
 800247e:	2302      	movs	r3, #2
 8002480:	77fb      	strb	r3, [r7, #31]
 8002482:	e073      	b.n	800256c <UART_SetConfig+0x348>
 8002484:	2304      	movs	r3, #4
 8002486:	77fb      	strb	r3, [r7, #31]
 8002488:	e070      	b.n	800256c <UART_SetConfig+0x348>
 800248a:	2308      	movs	r3, #8
 800248c:	77fb      	strb	r3, [r7, #31]
 800248e:	e06d      	b.n	800256c <UART_SetConfig+0x348>
 8002490:	2310      	movs	r3, #16
 8002492:	77fb      	strb	r3, [r7, #31]
 8002494:	e06a      	b.n	800256c <UART_SetConfig+0x348>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a1b      	ldr	r2, [pc, #108]	@ (8002508 <UART_SetConfig+0x2e4>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d138      	bne.n	8002512 <UART_SetConfig+0x2ee>
 80024a0:	4b13      	ldr	r3, [pc, #76]	@ (80024f0 <UART_SetConfig+0x2cc>)
 80024a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024a6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80024aa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80024ae:	d017      	beq.n	80024e0 <UART_SetConfig+0x2bc>
 80024b0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80024b4:	d82a      	bhi.n	800250c <UART_SetConfig+0x2e8>
 80024b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80024ba:	d00b      	beq.n	80024d4 <UART_SetConfig+0x2b0>
 80024bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80024c0:	d824      	bhi.n	800250c <UART_SetConfig+0x2e8>
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d003      	beq.n	80024ce <UART_SetConfig+0x2aa>
 80024c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024ca:	d006      	beq.n	80024da <UART_SetConfig+0x2b6>
 80024cc:	e01e      	b.n	800250c <UART_SetConfig+0x2e8>
 80024ce:	2300      	movs	r3, #0
 80024d0:	77fb      	strb	r3, [r7, #31]
 80024d2:	e04b      	b.n	800256c <UART_SetConfig+0x348>
 80024d4:	2302      	movs	r3, #2
 80024d6:	77fb      	strb	r3, [r7, #31]
 80024d8:	e048      	b.n	800256c <UART_SetConfig+0x348>
 80024da:	2304      	movs	r3, #4
 80024dc:	77fb      	strb	r3, [r7, #31]
 80024de:	e045      	b.n	800256c <UART_SetConfig+0x348>
 80024e0:	2308      	movs	r3, #8
 80024e2:	77fb      	strb	r3, [r7, #31]
 80024e4:	e042      	b.n	800256c <UART_SetConfig+0x348>
 80024e6:	bf00      	nop
 80024e8:	efff69f3 	.word	0xefff69f3
 80024ec:	40011000 	.word	0x40011000
 80024f0:	40023800 	.word	0x40023800
 80024f4:	40004400 	.word	0x40004400
 80024f8:	40004800 	.word	0x40004800
 80024fc:	40004c00 	.word	0x40004c00
 8002500:	40005000 	.word	0x40005000
 8002504:	40011400 	.word	0x40011400
 8002508:	40007800 	.word	0x40007800
 800250c:	2310      	movs	r3, #16
 800250e:	77fb      	strb	r3, [r7, #31]
 8002510:	e02c      	b.n	800256c <UART_SetConfig+0x348>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a72      	ldr	r2, [pc, #456]	@ (80026e0 <UART_SetConfig+0x4bc>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d125      	bne.n	8002568 <UART_SetConfig+0x344>
 800251c:	4b71      	ldr	r3, [pc, #452]	@ (80026e4 <UART_SetConfig+0x4c0>)
 800251e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002522:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002526:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800252a:	d017      	beq.n	800255c <UART_SetConfig+0x338>
 800252c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002530:	d817      	bhi.n	8002562 <UART_SetConfig+0x33e>
 8002532:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002536:	d00b      	beq.n	8002550 <UART_SetConfig+0x32c>
 8002538:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800253c:	d811      	bhi.n	8002562 <UART_SetConfig+0x33e>
 800253e:	2b00      	cmp	r3, #0
 8002540:	d003      	beq.n	800254a <UART_SetConfig+0x326>
 8002542:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002546:	d006      	beq.n	8002556 <UART_SetConfig+0x332>
 8002548:	e00b      	b.n	8002562 <UART_SetConfig+0x33e>
 800254a:	2300      	movs	r3, #0
 800254c:	77fb      	strb	r3, [r7, #31]
 800254e:	e00d      	b.n	800256c <UART_SetConfig+0x348>
 8002550:	2302      	movs	r3, #2
 8002552:	77fb      	strb	r3, [r7, #31]
 8002554:	e00a      	b.n	800256c <UART_SetConfig+0x348>
 8002556:	2304      	movs	r3, #4
 8002558:	77fb      	strb	r3, [r7, #31]
 800255a:	e007      	b.n	800256c <UART_SetConfig+0x348>
 800255c:	2308      	movs	r3, #8
 800255e:	77fb      	strb	r3, [r7, #31]
 8002560:	e004      	b.n	800256c <UART_SetConfig+0x348>
 8002562:	2310      	movs	r3, #16
 8002564:	77fb      	strb	r3, [r7, #31]
 8002566:	e001      	b.n	800256c <UART_SetConfig+0x348>
 8002568:	2310      	movs	r3, #16
 800256a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	69db      	ldr	r3, [r3, #28]
 8002570:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002574:	d15b      	bne.n	800262e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8002576:	7ffb      	ldrb	r3, [r7, #31]
 8002578:	2b08      	cmp	r3, #8
 800257a:	d828      	bhi.n	80025ce <UART_SetConfig+0x3aa>
 800257c:	a201      	add	r2, pc, #4	@ (adr r2, 8002584 <UART_SetConfig+0x360>)
 800257e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002582:	bf00      	nop
 8002584:	080025a9 	.word	0x080025a9
 8002588:	080025b1 	.word	0x080025b1
 800258c:	080025b9 	.word	0x080025b9
 8002590:	080025cf 	.word	0x080025cf
 8002594:	080025bf 	.word	0x080025bf
 8002598:	080025cf 	.word	0x080025cf
 800259c:	080025cf 	.word	0x080025cf
 80025a0:	080025cf 	.word	0x080025cf
 80025a4:	080025c7 	.word	0x080025c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80025a8:	f7ff fbbe 	bl	8001d28 <HAL_RCC_GetPCLK1Freq>
 80025ac:	61b8      	str	r0, [r7, #24]
        break;
 80025ae:	e013      	b.n	80025d8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80025b0:	f7ff fbce 	bl	8001d50 <HAL_RCC_GetPCLK2Freq>
 80025b4:	61b8      	str	r0, [r7, #24]
        break;
 80025b6:	e00f      	b.n	80025d8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80025b8:	4b4b      	ldr	r3, [pc, #300]	@ (80026e8 <UART_SetConfig+0x4c4>)
 80025ba:	61bb      	str	r3, [r7, #24]
        break;
 80025bc:	e00c      	b.n	80025d8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80025be:	f7ff fae1 	bl	8001b84 <HAL_RCC_GetSysClockFreq>
 80025c2:	61b8      	str	r0, [r7, #24]
        break;
 80025c4:	e008      	b.n	80025d8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80025c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80025ca:	61bb      	str	r3, [r7, #24]
        break;
 80025cc:	e004      	b.n	80025d8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80025ce:	2300      	movs	r3, #0
 80025d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	77bb      	strb	r3, [r7, #30]
        break;
 80025d6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d074      	beq.n	80026c8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	005a      	lsls	r2, r3, #1
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	085b      	lsrs	r3, r3, #1
 80025e8:	441a      	add	r2, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	2b0f      	cmp	r3, #15
 80025f8:	d916      	bls.n	8002628 <UART_SetConfig+0x404>
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002600:	d212      	bcs.n	8002628 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	b29b      	uxth	r3, r3
 8002606:	f023 030f 	bic.w	r3, r3, #15
 800260a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	085b      	lsrs	r3, r3, #1
 8002610:	b29b      	uxth	r3, r3
 8002612:	f003 0307 	and.w	r3, r3, #7
 8002616:	b29a      	uxth	r2, r3
 8002618:	89fb      	ldrh	r3, [r7, #14]
 800261a:	4313      	orrs	r3, r2
 800261c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	89fa      	ldrh	r2, [r7, #14]
 8002624:	60da      	str	r2, [r3, #12]
 8002626:	e04f      	b.n	80026c8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	77bb      	strb	r3, [r7, #30]
 800262c:	e04c      	b.n	80026c8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800262e:	7ffb      	ldrb	r3, [r7, #31]
 8002630:	2b08      	cmp	r3, #8
 8002632:	d828      	bhi.n	8002686 <UART_SetConfig+0x462>
 8002634:	a201      	add	r2, pc, #4	@ (adr r2, 800263c <UART_SetConfig+0x418>)
 8002636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800263a:	bf00      	nop
 800263c:	08002661 	.word	0x08002661
 8002640:	08002669 	.word	0x08002669
 8002644:	08002671 	.word	0x08002671
 8002648:	08002687 	.word	0x08002687
 800264c:	08002677 	.word	0x08002677
 8002650:	08002687 	.word	0x08002687
 8002654:	08002687 	.word	0x08002687
 8002658:	08002687 	.word	0x08002687
 800265c:	0800267f 	.word	0x0800267f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002660:	f7ff fb62 	bl	8001d28 <HAL_RCC_GetPCLK1Freq>
 8002664:	61b8      	str	r0, [r7, #24]
        break;
 8002666:	e013      	b.n	8002690 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002668:	f7ff fb72 	bl	8001d50 <HAL_RCC_GetPCLK2Freq>
 800266c:	61b8      	str	r0, [r7, #24]
        break;
 800266e:	e00f      	b.n	8002690 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002670:	4b1d      	ldr	r3, [pc, #116]	@ (80026e8 <UART_SetConfig+0x4c4>)
 8002672:	61bb      	str	r3, [r7, #24]
        break;
 8002674:	e00c      	b.n	8002690 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002676:	f7ff fa85 	bl	8001b84 <HAL_RCC_GetSysClockFreq>
 800267a:	61b8      	str	r0, [r7, #24]
        break;
 800267c:	e008      	b.n	8002690 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800267e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002682:	61bb      	str	r3, [r7, #24]
        break;
 8002684:	e004      	b.n	8002690 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8002686:	2300      	movs	r3, #0
 8002688:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	77bb      	strb	r3, [r7, #30]
        break;
 800268e:	bf00      	nop
    }

    if (pclk != 0U)
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d018      	beq.n	80026c8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	085a      	lsrs	r2, r3, #1
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	441a      	add	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	2b0f      	cmp	r3, #15
 80026ae:	d909      	bls.n	80026c4 <UART_SetConfig+0x4a0>
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026b6:	d205      	bcs.n	80026c4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	b29a      	uxth	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	60da      	str	r2, [r3, #12]
 80026c2:	e001      	b.n	80026c8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80026d4:	7fbb      	ldrb	r3, [r7, #30]
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3720      	adds	r7, #32
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	40007c00 	.word	0x40007c00
 80026e4:	40023800 	.word	0x40023800
 80026e8:	00f42400 	.word	0x00f42400

080026ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f8:	f003 0308 	and.w	r3, r3, #8
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d00a      	beq.n	8002716 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	430a      	orrs	r2, r1
 8002714:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	2b00      	cmp	r3, #0
 8002720:	d00a      	beq.n	8002738 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	430a      	orrs	r2, r1
 8002736:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800273c:	f003 0302 	and.w	r3, r3, #2
 8002740:	2b00      	cmp	r3, #0
 8002742:	d00a      	beq.n	800275a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	430a      	orrs	r2, r1
 8002758:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800275e:	f003 0304 	and.w	r3, r3, #4
 8002762:	2b00      	cmp	r3, #0
 8002764:	d00a      	beq.n	800277c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	430a      	orrs	r2, r1
 800277a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002780:	f003 0310 	and.w	r3, r3, #16
 8002784:	2b00      	cmp	r3, #0
 8002786:	d00a      	beq.n	800279e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	430a      	orrs	r2, r1
 800279c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a2:	f003 0320 	and.w	r3, r3, #32
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00a      	beq.n	80027c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	430a      	orrs	r2, r1
 80027be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d01a      	beq.n	8002802 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	430a      	orrs	r2, r1
 80027e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80027ea:	d10a      	bne.n	8002802 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	430a      	orrs	r2, r1
 8002800:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002806:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00a      	beq.n	8002824 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	430a      	orrs	r2, r1
 8002822:	605a      	str	r2, [r3, #4]
  }
}
 8002824:	bf00      	nop
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b098      	sub	sp, #96	@ 0x60
 8002834:	af02      	add	r7, sp, #8
 8002836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002840:	f7fe fb0c 	bl	8000e5c <HAL_GetTick>
 8002844:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0308 	and.w	r3, r3, #8
 8002850:	2b08      	cmp	r3, #8
 8002852:	d12e      	bne.n	80028b2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002854:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002858:	9300      	str	r3, [sp, #0]
 800285a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800285c:	2200      	movs	r2, #0
 800285e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 f88c 	bl	8002980 <UART_WaitOnFlagUntilTimeout>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d021      	beq.n	80028b2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002876:	e853 3f00 	ldrex	r3, [r3]
 800287a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800287c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800287e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002882:	653b      	str	r3, [r7, #80]	@ 0x50
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	461a      	mov	r2, r3
 800288a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800288c:	647b      	str	r3, [r7, #68]	@ 0x44
 800288e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002890:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002892:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002894:	e841 2300 	strex	r3, r2, [r1]
 8002898:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800289a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800289c:	2b00      	cmp	r3, #0
 800289e:	d1e6      	bne.n	800286e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2220      	movs	r2, #32
 80028a4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e062      	b.n	8002978 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0304 	and.w	r3, r3, #4
 80028bc:	2b04      	cmp	r3, #4
 80028be:	d149      	bne.n	8002954 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80028c0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80028c4:	9300      	str	r3, [sp, #0]
 80028c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028c8:	2200      	movs	r2, #0
 80028ca:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f000 f856 	bl	8002980 <UART_WaitOnFlagUntilTimeout>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d03c      	beq.n	8002954 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e2:	e853 3f00 	ldrex	r3, [r3]
 80028e6:	623b      	str	r3, [r7, #32]
   return(result);
 80028e8:	6a3b      	ldr	r3, [r7, #32]
 80028ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80028ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	461a      	mov	r2, r3
 80028f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80028f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80028fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80028fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002900:	e841 2300 	strex	r3, r2, [r1]
 8002904:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002908:	2b00      	cmp	r3, #0
 800290a:	d1e6      	bne.n	80028da <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	3308      	adds	r3, #8
 8002912:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	e853 3f00 	ldrex	r3, [r3]
 800291a:	60fb      	str	r3, [r7, #12]
   return(result);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f023 0301 	bic.w	r3, r3, #1
 8002922:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	3308      	adds	r3, #8
 800292a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800292c:	61fa      	str	r2, [r7, #28]
 800292e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002930:	69b9      	ldr	r1, [r7, #24]
 8002932:	69fa      	ldr	r2, [r7, #28]
 8002934:	e841 2300 	strex	r3, r2, [r1]
 8002938:	617b      	str	r3, [r7, #20]
   return(result);
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d1e5      	bne.n	800290c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2220      	movs	r2, #32
 8002944:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e011      	b.n	8002978 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2220      	movs	r2, #32
 8002958:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2220      	movs	r2, #32
 800295e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8002976:	2300      	movs	r3, #0
}
 8002978:	4618      	mov	r0, r3
 800297a:	3758      	adds	r7, #88	@ 0x58
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}

08002980 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	603b      	str	r3, [r7, #0]
 800298c:	4613      	mov	r3, r2
 800298e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002990:	e04f      	b.n	8002a32 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002998:	d04b      	beq.n	8002a32 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800299a:	f7fe fa5f 	bl	8000e5c <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d302      	bcc.n	80029b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d101      	bne.n	80029b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e04e      	b.n	8002a52 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0304 	and.w	r3, r3, #4
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d037      	beq.n	8002a32 <UART_WaitOnFlagUntilTimeout+0xb2>
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	2b80      	cmp	r3, #128	@ 0x80
 80029c6:	d034      	beq.n	8002a32 <UART_WaitOnFlagUntilTimeout+0xb2>
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	2b40      	cmp	r3, #64	@ 0x40
 80029cc:	d031      	beq.n	8002a32 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	69db      	ldr	r3, [r3, #28]
 80029d4:	f003 0308 	and.w	r3, r3, #8
 80029d8:	2b08      	cmp	r3, #8
 80029da:	d110      	bne.n	80029fe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2208      	movs	r2, #8
 80029e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80029e4:	68f8      	ldr	r0, [r7, #12]
 80029e6:	f000 f838 	bl	8002a5a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2208      	movs	r2, #8
 80029ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e029      	b.n	8002a52 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	69db      	ldr	r3, [r3, #28]
 8002a04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002a0c:	d111      	bne.n	8002a32 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002a16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002a18:	68f8      	ldr	r0, [r7, #12]
 8002a1a:	f000 f81e 	bl	8002a5a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2220      	movs	r2, #32
 8002a22:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e00f      	b.n	8002a52 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	69da      	ldr	r2, [r3, #28]
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	68ba      	ldr	r2, [r7, #8]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	bf0c      	ite	eq
 8002a42:	2301      	moveq	r3, #1
 8002a44:	2300      	movne	r3, #0
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	461a      	mov	r2, r3
 8002a4a:	79fb      	ldrb	r3, [r7, #7]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d0a0      	beq.n	8002992 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3710      	adds	r7, #16
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	b095      	sub	sp, #84	@ 0x54
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a6a:	e853 3f00 	ldrex	r3, [r3]
 8002a6e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a72:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002a76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a80:	643b      	str	r3, [r7, #64]	@ 0x40
 8002a82:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a84:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002a86:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002a88:	e841 2300 	strex	r3, r2, [r1]
 8002a8c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002a8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d1e6      	bne.n	8002a62 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	3308      	adds	r3, #8
 8002a9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a9c:	6a3b      	ldr	r3, [r7, #32]
 8002a9e:	e853 3f00 	ldrex	r3, [r3]
 8002aa2:	61fb      	str	r3, [r7, #28]
   return(result);
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	f023 0301 	bic.w	r3, r3, #1
 8002aaa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	3308      	adds	r3, #8
 8002ab2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002ab4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ab6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ab8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002aba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002abc:	e841 2300 	strex	r3, r2, [r1]
 8002ac0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d1e5      	bne.n	8002a94 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d118      	bne.n	8002b02 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	e853 3f00 	ldrex	r3, [r3]
 8002adc:	60bb      	str	r3, [r7, #8]
   return(result);
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	f023 0310 	bic.w	r3, r3, #16
 8002ae4:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	461a      	mov	r2, r3
 8002aec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002aee:	61bb      	str	r3, [r7, #24]
 8002af0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002af2:	6979      	ldr	r1, [r7, #20]
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	e841 2300 	strex	r3, r2, [r1]
 8002afa:	613b      	str	r3, [r7, #16]
   return(result);
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1e6      	bne.n	8002ad0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2220      	movs	r2, #32
 8002b06:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002b16:	bf00      	nop
 8002b18:	3754      	adds	r7, #84	@ 0x54
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
	...

08002b24 <siprintf>:
 8002b24:	b40e      	push	{r1, r2, r3}
 8002b26:	b500      	push	{lr}
 8002b28:	b09c      	sub	sp, #112	@ 0x70
 8002b2a:	ab1d      	add	r3, sp, #116	@ 0x74
 8002b2c:	9002      	str	r0, [sp, #8]
 8002b2e:	9006      	str	r0, [sp, #24]
 8002b30:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002b34:	4809      	ldr	r0, [pc, #36]	@ (8002b5c <siprintf+0x38>)
 8002b36:	9107      	str	r1, [sp, #28]
 8002b38:	9104      	str	r1, [sp, #16]
 8002b3a:	4909      	ldr	r1, [pc, #36]	@ (8002b60 <siprintf+0x3c>)
 8002b3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002b40:	9105      	str	r1, [sp, #20]
 8002b42:	6800      	ldr	r0, [r0, #0]
 8002b44:	9301      	str	r3, [sp, #4]
 8002b46:	a902      	add	r1, sp, #8
 8002b48:	f000 f98e 	bl	8002e68 <_svfiprintf_r>
 8002b4c:	9b02      	ldr	r3, [sp, #8]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	701a      	strb	r2, [r3, #0]
 8002b52:	b01c      	add	sp, #112	@ 0x70
 8002b54:	f85d eb04 	ldr.w	lr, [sp], #4
 8002b58:	b003      	add	sp, #12
 8002b5a:	4770      	bx	lr
 8002b5c:	2000000c 	.word	0x2000000c
 8002b60:	ffff0208 	.word	0xffff0208

08002b64 <memset>:
 8002b64:	4402      	add	r2, r0
 8002b66:	4603      	mov	r3, r0
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d100      	bne.n	8002b6e <memset+0xa>
 8002b6c:	4770      	bx	lr
 8002b6e:	f803 1b01 	strb.w	r1, [r3], #1
 8002b72:	e7f9      	b.n	8002b68 <memset+0x4>

08002b74 <__libc_init_array>:
 8002b74:	b570      	push	{r4, r5, r6, lr}
 8002b76:	4d0d      	ldr	r5, [pc, #52]	@ (8002bac <__libc_init_array+0x38>)
 8002b78:	4c0d      	ldr	r4, [pc, #52]	@ (8002bb0 <__libc_init_array+0x3c>)
 8002b7a:	1b64      	subs	r4, r4, r5
 8002b7c:	10a4      	asrs	r4, r4, #2
 8002b7e:	2600      	movs	r6, #0
 8002b80:	42a6      	cmp	r6, r4
 8002b82:	d109      	bne.n	8002b98 <__libc_init_array+0x24>
 8002b84:	4d0b      	ldr	r5, [pc, #44]	@ (8002bb4 <__libc_init_array+0x40>)
 8002b86:	4c0c      	ldr	r4, [pc, #48]	@ (8002bb8 <__libc_init_array+0x44>)
 8002b88:	f000 fc74 	bl	8003474 <_init>
 8002b8c:	1b64      	subs	r4, r4, r5
 8002b8e:	10a4      	asrs	r4, r4, #2
 8002b90:	2600      	movs	r6, #0
 8002b92:	42a6      	cmp	r6, r4
 8002b94:	d105      	bne.n	8002ba2 <__libc_init_array+0x2e>
 8002b96:	bd70      	pop	{r4, r5, r6, pc}
 8002b98:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b9c:	4798      	blx	r3
 8002b9e:	3601      	adds	r6, #1
 8002ba0:	e7ee      	b.n	8002b80 <__libc_init_array+0xc>
 8002ba2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ba6:	4798      	blx	r3
 8002ba8:	3601      	adds	r6, #1
 8002baa:	e7f2      	b.n	8002b92 <__libc_init_array+0x1e>
 8002bac:	08003554 	.word	0x08003554
 8002bb0:	08003554 	.word	0x08003554
 8002bb4:	08003554 	.word	0x08003554
 8002bb8:	08003558 	.word	0x08003558

08002bbc <__retarget_lock_acquire_recursive>:
 8002bbc:	4770      	bx	lr

08002bbe <__retarget_lock_release_recursive>:
 8002bbe:	4770      	bx	lr

08002bc0 <_free_r>:
 8002bc0:	b538      	push	{r3, r4, r5, lr}
 8002bc2:	4605      	mov	r5, r0
 8002bc4:	2900      	cmp	r1, #0
 8002bc6:	d041      	beq.n	8002c4c <_free_r+0x8c>
 8002bc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002bcc:	1f0c      	subs	r4, r1, #4
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	bfb8      	it	lt
 8002bd2:	18e4      	addlt	r4, r4, r3
 8002bd4:	f000 f8e0 	bl	8002d98 <__malloc_lock>
 8002bd8:	4a1d      	ldr	r2, [pc, #116]	@ (8002c50 <_free_r+0x90>)
 8002bda:	6813      	ldr	r3, [r2, #0]
 8002bdc:	b933      	cbnz	r3, 8002bec <_free_r+0x2c>
 8002bde:	6063      	str	r3, [r4, #4]
 8002be0:	6014      	str	r4, [r2, #0]
 8002be2:	4628      	mov	r0, r5
 8002be4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002be8:	f000 b8dc 	b.w	8002da4 <__malloc_unlock>
 8002bec:	42a3      	cmp	r3, r4
 8002bee:	d908      	bls.n	8002c02 <_free_r+0x42>
 8002bf0:	6820      	ldr	r0, [r4, #0]
 8002bf2:	1821      	adds	r1, r4, r0
 8002bf4:	428b      	cmp	r3, r1
 8002bf6:	bf01      	itttt	eq
 8002bf8:	6819      	ldreq	r1, [r3, #0]
 8002bfa:	685b      	ldreq	r3, [r3, #4]
 8002bfc:	1809      	addeq	r1, r1, r0
 8002bfe:	6021      	streq	r1, [r4, #0]
 8002c00:	e7ed      	b.n	8002bde <_free_r+0x1e>
 8002c02:	461a      	mov	r2, r3
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	b10b      	cbz	r3, 8002c0c <_free_r+0x4c>
 8002c08:	42a3      	cmp	r3, r4
 8002c0a:	d9fa      	bls.n	8002c02 <_free_r+0x42>
 8002c0c:	6811      	ldr	r1, [r2, #0]
 8002c0e:	1850      	adds	r0, r2, r1
 8002c10:	42a0      	cmp	r0, r4
 8002c12:	d10b      	bne.n	8002c2c <_free_r+0x6c>
 8002c14:	6820      	ldr	r0, [r4, #0]
 8002c16:	4401      	add	r1, r0
 8002c18:	1850      	adds	r0, r2, r1
 8002c1a:	4283      	cmp	r3, r0
 8002c1c:	6011      	str	r1, [r2, #0]
 8002c1e:	d1e0      	bne.n	8002be2 <_free_r+0x22>
 8002c20:	6818      	ldr	r0, [r3, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	6053      	str	r3, [r2, #4]
 8002c26:	4408      	add	r0, r1
 8002c28:	6010      	str	r0, [r2, #0]
 8002c2a:	e7da      	b.n	8002be2 <_free_r+0x22>
 8002c2c:	d902      	bls.n	8002c34 <_free_r+0x74>
 8002c2e:	230c      	movs	r3, #12
 8002c30:	602b      	str	r3, [r5, #0]
 8002c32:	e7d6      	b.n	8002be2 <_free_r+0x22>
 8002c34:	6820      	ldr	r0, [r4, #0]
 8002c36:	1821      	adds	r1, r4, r0
 8002c38:	428b      	cmp	r3, r1
 8002c3a:	bf04      	itt	eq
 8002c3c:	6819      	ldreq	r1, [r3, #0]
 8002c3e:	685b      	ldreq	r3, [r3, #4]
 8002c40:	6063      	str	r3, [r4, #4]
 8002c42:	bf04      	itt	eq
 8002c44:	1809      	addeq	r1, r1, r0
 8002c46:	6021      	streq	r1, [r4, #0]
 8002c48:	6054      	str	r4, [r2, #4]
 8002c4a:	e7ca      	b.n	8002be2 <_free_r+0x22>
 8002c4c:	bd38      	pop	{r3, r4, r5, pc}
 8002c4e:	bf00      	nop
 8002c50:	200003b4 	.word	0x200003b4

08002c54 <sbrk_aligned>:
 8002c54:	b570      	push	{r4, r5, r6, lr}
 8002c56:	4e0f      	ldr	r6, [pc, #60]	@ (8002c94 <sbrk_aligned+0x40>)
 8002c58:	460c      	mov	r4, r1
 8002c5a:	6831      	ldr	r1, [r6, #0]
 8002c5c:	4605      	mov	r5, r0
 8002c5e:	b911      	cbnz	r1, 8002c66 <sbrk_aligned+0x12>
 8002c60:	f000 fba6 	bl	80033b0 <_sbrk_r>
 8002c64:	6030      	str	r0, [r6, #0]
 8002c66:	4621      	mov	r1, r4
 8002c68:	4628      	mov	r0, r5
 8002c6a:	f000 fba1 	bl	80033b0 <_sbrk_r>
 8002c6e:	1c43      	adds	r3, r0, #1
 8002c70:	d103      	bne.n	8002c7a <sbrk_aligned+0x26>
 8002c72:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8002c76:	4620      	mov	r0, r4
 8002c78:	bd70      	pop	{r4, r5, r6, pc}
 8002c7a:	1cc4      	adds	r4, r0, #3
 8002c7c:	f024 0403 	bic.w	r4, r4, #3
 8002c80:	42a0      	cmp	r0, r4
 8002c82:	d0f8      	beq.n	8002c76 <sbrk_aligned+0x22>
 8002c84:	1a21      	subs	r1, r4, r0
 8002c86:	4628      	mov	r0, r5
 8002c88:	f000 fb92 	bl	80033b0 <_sbrk_r>
 8002c8c:	3001      	adds	r0, #1
 8002c8e:	d1f2      	bne.n	8002c76 <sbrk_aligned+0x22>
 8002c90:	e7ef      	b.n	8002c72 <sbrk_aligned+0x1e>
 8002c92:	bf00      	nop
 8002c94:	200003b0 	.word	0x200003b0

08002c98 <_malloc_r>:
 8002c98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c9c:	1ccd      	adds	r5, r1, #3
 8002c9e:	f025 0503 	bic.w	r5, r5, #3
 8002ca2:	3508      	adds	r5, #8
 8002ca4:	2d0c      	cmp	r5, #12
 8002ca6:	bf38      	it	cc
 8002ca8:	250c      	movcc	r5, #12
 8002caa:	2d00      	cmp	r5, #0
 8002cac:	4606      	mov	r6, r0
 8002cae:	db01      	blt.n	8002cb4 <_malloc_r+0x1c>
 8002cb0:	42a9      	cmp	r1, r5
 8002cb2:	d904      	bls.n	8002cbe <_malloc_r+0x26>
 8002cb4:	230c      	movs	r3, #12
 8002cb6:	6033      	str	r3, [r6, #0]
 8002cb8:	2000      	movs	r0, #0
 8002cba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002cbe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002d94 <_malloc_r+0xfc>
 8002cc2:	f000 f869 	bl	8002d98 <__malloc_lock>
 8002cc6:	f8d8 3000 	ldr.w	r3, [r8]
 8002cca:	461c      	mov	r4, r3
 8002ccc:	bb44      	cbnz	r4, 8002d20 <_malloc_r+0x88>
 8002cce:	4629      	mov	r1, r5
 8002cd0:	4630      	mov	r0, r6
 8002cd2:	f7ff ffbf 	bl	8002c54 <sbrk_aligned>
 8002cd6:	1c43      	adds	r3, r0, #1
 8002cd8:	4604      	mov	r4, r0
 8002cda:	d158      	bne.n	8002d8e <_malloc_r+0xf6>
 8002cdc:	f8d8 4000 	ldr.w	r4, [r8]
 8002ce0:	4627      	mov	r7, r4
 8002ce2:	2f00      	cmp	r7, #0
 8002ce4:	d143      	bne.n	8002d6e <_malloc_r+0xd6>
 8002ce6:	2c00      	cmp	r4, #0
 8002ce8:	d04b      	beq.n	8002d82 <_malloc_r+0xea>
 8002cea:	6823      	ldr	r3, [r4, #0]
 8002cec:	4639      	mov	r1, r7
 8002cee:	4630      	mov	r0, r6
 8002cf0:	eb04 0903 	add.w	r9, r4, r3
 8002cf4:	f000 fb5c 	bl	80033b0 <_sbrk_r>
 8002cf8:	4581      	cmp	r9, r0
 8002cfa:	d142      	bne.n	8002d82 <_malloc_r+0xea>
 8002cfc:	6821      	ldr	r1, [r4, #0]
 8002cfe:	1a6d      	subs	r5, r5, r1
 8002d00:	4629      	mov	r1, r5
 8002d02:	4630      	mov	r0, r6
 8002d04:	f7ff ffa6 	bl	8002c54 <sbrk_aligned>
 8002d08:	3001      	adds	r0, #1
 8002d0a:	d03a      	beq.n	8002d82 <_malloc_r+0xea>
 8002d0c:	6823      	ldr	r3, [r4, #0]
 8002d0e:	442b      	add	r3, r5
 8002d10:	6023      	str	r3, [r4, #0]
 8002d12:	f8d8 3000 	ldr.w	r3, [r8]
 8002d16:	685a      	ldr	r2, [r3, #4]
 8002d18:	bb62      	cbnz	r2, 8002d74 <_malloc_r+0xdc>
 8002d1a:	f8c8 7000 	str.w	r7, [r8]
 8002d1e:	e00f      	b.n	8002d40 <_malloc_r+0xa8>
 8002d20:	6822      	ldr	r2, [r4, #0]
 8002d22:	1b52      	subs	r2, r2, r5
 8002d24:	d420      	bmi.n	8002d68 <_malloc_r+0xd0>
 8002d26:	2a0b      	cmp	r2, #11
 8002d28:	d917      	bls.n	8002d5a <_malloc_r+0xc2>
 8002d2a:	1961      	adds	r1, r4, r5
 8002d2c:	42a3      	cmp	r3, r4
 8002d2e:	6025      	str	r5, [r4, #0]
 8002d30:	bf18      	it	ne
 8002d32:	6059      	strne	r1, [r3, #4]
 8002d34:	6863      	ldr	r3, [r4, #4]
 8002d36:	bf08      	it	eq
 8002d38:	f8c8 1000 	streq.w	r1, [r8]
 8002d3c:	5162      	str	r2, [r4, r5]
 8002d3e:	604b      	str	r3, [r1, #4]
 8002d40:	4630      	mov	r0, r6
 8002d42:	f000 f82f 	bl	8002da4 <__malloc_unlock>
 8002d46:	f104 000b 	add.w	r0, r4, #11
 8002d4a:	1d23      	adds	r3, r4, #4
 8002d4c:	f020 0007 	bic.w	r0, r0, #7
 8002d50:	1ac2      	subs	r2, r0, r3
 8002d52:	bf1c      	itt	ne
 8002d54:	1a1b      	subne	r3, r3, r0
 8002d56:	50a3      	strne	r3, [r4, r2]
 8002d58:	e7af      	b.n	8002cba <_malloc_r+0x22>
 8002d5a:	6862      	ldr	r2, [r4, #4]
 8002d5c:	42a3      	cmp	r3, r4
 8002d5e:	bf0c      	ite	eq
 8002d60:	f8c8 2000 	streq.w	r2, [r8]
 8002d64:	605a      	strne	r2, [r3, #4]
 8002d66:	e7eb      	b.n	8002d40 <_malloc_r+0xa8>
 8002d68:	4623      	mov	r3, r4
 8002d6a:	6864      	ldr	r4, [r4, #4]
 8002d6c:	e7ae      	b.n	8002ccc <_malloc_r+0x34>
 8002d6e:	463c      	mov	r4, r7
 8002d70:	687f      	ldr	r7, [r7, #4]
 8002d72:	e7b6      	b.n	8002ce2 <_malloc_r+0x4a>
 8002d74:	461a      	mov	r2, r3
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	42a3      	cmp	r3, r4
 8002d7a:	d1fb      	bne.n	8002d74 <_malloc_r+0xdc>
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	6053      	str	r3, [r2, #4]
 8002d80:	e7de      	b.n	8002d40 <_malloc_r+0xa8>
 8002d82:	230c      	movs	r3, #12
 8002d84:	6033      	str	r3, [r6, #0]
 8002d86:	4630      	mov	r0, r6
 8002d88:	f000 f80c 	bl	8002da4 <__malloc_unlock>
 8002d8c:	e794      	b.n	8002cb8 <_malloc_r+0x20>
 8002d8e:	6005      	str	r5, [r0, #0]
 8002d90:	e7d6      	b.n	8002d40 <_malloc_r+0xa8>
 8002d92:	bf00      	nop
 8002d94:	200003b4 	.word	0x200003b4

08002d98 <__malloc_lock>:
 8002d98:	4801      	ldr	r0, [pc, #4]	@ (8002da0 <__malloc_lock+0x8>)
 8002d9a:	f7ff bf0f 	b.w	8002bbc <__retarget_lock_acquire_recursive>
 8002d9e:	bf00      	nop
 8002da0:	200003ac 	.word	0x200003ac

08002da4 <__malloc_unlock>:
 8002da4:	4801      	ldr	r0, [pc, #4]	@ (8002dac <__malloc_unlock+0x8>)
 8002da6:	f7ff bf0a 	b.w	8002bbe <__retarget_lock_release_recursive>
 8002daa:	bf00      	nop
 8002dac:	200003ac 	.word	0x200003ac

08002db0 <__ssputs_r>:
 8002db0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002db4:	688e      	ldr	r6, [r1, #8]
 8002db6:	461f      	mov	r7, r3
 8002db8:	42be      	cmp	r6, r7
 8002dba:	680b      	ldr	r3, [r1, #0]
 8002dbc:	4682      	mov	sl, r0
 8002dbe:	460c      	mov	r4, r1
 8002dc0:	4690      	mov	r8, r2
 8002dc2:	d82d      	bhi.n	8002e20 <__ssputs_r+0x70>
 8002dc4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002dc8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002dcc:	d026      	beq.n	8002e1c <__ssputs_r+0x6c>
 8002dce:	6965      	ldr	r5, [r4, #20]
 8002dd0:	6909      	ldr	r1, [r1, #16]
 8002dd2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002dd6:	eba3 0901 	sub.w	r9, r3, r1
 8002dda:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002dde:	1c7b      	adds	r3, r7, #1
 8002de0:	444b      	add	r3, r9
 8002de2:	106d      	asrs	r5, r5, #1
 8002de4:	429d      	cmp	r5, r3
 8002de6:	bf38      	it	cc
 8002de8:	461d      	movcc	r5, r3
 8002dea:	0553      	lsls	r3, r2, #21
 8002dec:	d527      	bpl.n	8002e3e <__ssputs_r+0x8e>
 8002dee:	4629      	mov	r1, r5
 8002df0:	f7ff ff52 	bl	8002c98 <_malloc_r>
 8002df4:	4606      	mov	r6, r0
 8002df6:	b360      	cbz	r0, 8002e52 <__ssputs_r+0xa2>
 8002df8:	6921      	ldr	r1, [r4, #16]
 8002dfa:	464a      	mov	r2, r9
 8002dfc:	f000 fae8 	bl	80033d0 <memcpy>
 8002e00:	89a3      	ldrh	r3, [r4, #12]
 8002e02:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002e06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e0a:	81a3      	strh	r3, [r4, #12]
 8002e0c:	6126      	str	r6, [r4, #16]
 8002e0e:	6165      	str	r5, [r4, #20]
 8002e10:	444e      	add	r6, r9
 8002e12:	eba5 0509 	sub.w	r5, r5, r9
 8002e16:	6026      	str	r6, [r4, #0]
 8002e18:	60a5      	str	r5, [r4, #8]
 8002e1a:	463e      	mov	r6, r7
 8002e1c:	42be      	cmp	r6, r7
 8002e1e:	d900      	bls.n	8002e22 <__ssputs_r+0x72>
 8002e20:	463e      	mov	r6, r7
 8002e22:	6820      	ldr	r0, [r4, #0]
 8002e24:	4632      	mov	r2, r6
 8002e26:	4641      	mov	r1, r8
 8002e28:	f000 faa8 	bl	800337c <memmove>
 8002e2c:	68a3      	ldr	r3, [r4, #8]
 8002e2e:	1b9b      	subs	r3, r3, r6
 8002e30:	60a3      	str	r3, [r4, #8]
 8002e32:	6823      	ldr	r3, [r4, #0]
 8002e34:	4433      	add	r3, r6
 8002e36:	6023      	str	r3, [r4, #0]
 8002e38:	2000      	movs	r0, #0
 8002e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e3e:	462a      	mov	r2, r5
 8002e40:	f000 fad4 	bl	80033ec <_realloc_r>
 8002e44:	4606      	mov	r6, r0
 8002e46:	2800      	cmp	r0, #0
 8002e48:	d1e0      	bne.n	8002e0c <__ssputs_r+0x5c>
 8002e4a:	6921      	ldr	r1, [r4, #16]
 8002e4c:	4650      	mov	r0, sl
 8002e4e:	f7ff feb7 	bl	8002bc0 <_free_r>
 8002e52:	230c      	movs	r3, #12
 8002e54:	f8ca 3000 	str.w	r3, [sl]
 8002e58:	89a3      	ldrh	r3, [r4, #12]
 8002e5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e5e:	81a3      	strh	r3, [r4, #12]
 8002e60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002e64:	e7e9      	b.n	8002e3a <__ssputs_r+0x8a>
	...

08002e68 <_svfiprintf_r>:
 8002e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e6c:	4698      	mov	r8, r3
 8002e6e:	898b      	ldrh	r3, [r1, #12]
 8002e70:	061b      	lsls	r3, r3, #24
 8002e72:	b09d      	sub	sp, #116	@ 0x74
 8002e74:	4607      	mov	r7, r0
 8002e76:	460d      	mov	r5, r1
 8002e78:	4614      	mov	r4, r2
 8002e7a:	d510      	bpl.n	8002e9e <_svfiprintf_r+0x36>
 8002e7c:	690b      	ldr	r3, [r1, #16]
 8002e7e:	b973      	cbnz	r3, 8002e9e <_svfiprintf_r+0x36>
 8002e80:	2140      	movs	r1, #64	@ 0x40
 8002e82:	f7ff ff09 	bl	8002c98 <_malloc_r>
 8002e86:	6028      	str	r0, [r5, #0]
 8002e88:	6128      	str	r0, [r5, #16]
 8002e8a:	b930      	cbnz	r0, 8002e9a <_svfiprintf_r+0x32>
 8002e8c:	230c      	movs	r3, #12
 8002e8e:	603b      	str	r3, [r7, #0]
 8002e90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002e94:	b01d      	add	sp, #116	@ 0x74
 8002e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e9a:	2340      	movs	r3, #64	@ 0x40
 8002e9c:	616b      	str	r3, [r5, #20]
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	9309      	str	r3, [sp, #36]	@ 0x24
 8002ea2:	2320      	movs	r3, #32
 8002ea4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002ea8:	f8cd 800c 	str.w	r8, [sp, #12]
 8002eac:	2330      	movs	r3, #48	@ 0x30
 8002eae:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800304c <_svfiprintf_r+0x1e4>
 8002eb2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002eb6:	f04f 0901 	mov.w	r9, #1
 8002eba:	4623      	mov	r3, r4
 8002ebc:	469a      	mov	sl, r3
 8002ebe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002ec2:	b10a      	cbz	r2, 8002ec8 <_svfiprintf_r+0x60>
 8002ec4:	2a25      	cmp	r2, #37	@ 0x25
 8002ec6:	d1f9      	bne.n	8002ebc <_svfiprintf_r+0x54>
 8002ec8:	ebba 0b04 	subs.w	fp, sl, r4
 8002ecc:	d00b      	beq.n	8002ee6 <_svfiprintf_r+0x7e>
 8002ece:	465b      	mov	r3, fp
 8002ed0:	4622      	mov	r2, r4
 8002ed2:	4629      	mov	r1, r5
 8002ed4:	4638      	mov	r0, r7
 8002ed6:	f7ff ff6b 	bl	8002db0 <__ssputs_r>
 8002eda:	3001      	adds	r0, #1
 8002edc:	f000 80a7 	beq.w	800302e <_svfiprintf_r+0x1c6>
 8002ee0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002ee2:	445a      	add	r2, fp
 8002ee4:	9209      	str	r2, [sp, #36]	@ 0x24
 8002ee6:	f89a 3000 	ldrb.w	r3, [sl]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	f000 809f 	beq.w	800302e <_svfiprintf_r+0x1c6>
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002ef6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002efa:	f10a 0a01 	add.w	sl, sl, #1
 8002efe:	9304      	str	r3, [sp, #16]
 8002f00:	9307      	str	r3, [sp, #28]
 8002f02:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002f06:	931a      	str	r3, [sp, #104]	@ 0x68
 8002f08:	4654      	mov	r4, sl
 8002f0a:	2205      	movs	r2, #5
 8002f0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f10:	484e      	ldr	r0, [pc, #312]	@ (800304c <_svfiprintf_r+0x1e4>)
 8002f12:	f7fd f99d 	bl	8000250 <memchr>
 8002f16:	9a04      	ldr	r2, [sp, #16]
 8002f18:	b9d8      	cbnz	r0, 8002f52 <_svfiprintf_r+0xea>
 8002f1a:	06d0      	lsls	r0, r2, #27
 8002f1c:	bf44      	itt	mi
 8002f1e:	2320      	movmi	r3, #32
 8002f20:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002f24:	0711      	lsls	r1, r2, #28
 8002f26:	bf44      	itt	mi
 8002f28:	232b      	movmi	r3, #43	@ 0x2b
 8002f2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002f2e:	f89a 3000 	ldrb.w	r3, [sl]
 8002f32:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f34:	d015      	beq.n	8002f62 <_svfiprintf_r+0xfa>
 8002f36:	9a07      	ldr	r2, [sp, #28]
 8002f38:	4654      	mov	r4, sl
 8002f3a:	2000      	movs	r0, #0
 8002f3c:	f04f 0c0a 	mov.w	ip, #10
 8002f40:	4621      	mov	r1, r4
 8002f42:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002f46:	3b30      	subs	r3, #48	@ 0x30
 8002f48:	2b09      	cmp	r3, #9
 8002f4a:	d94b      	bls.n	8002fe4 <_svfiprintf_r+0x17c>
 8002f4c:	b1b0      	cbz	r0, 8002f7c <_svfiprintf_r+0x114>
 8002f4e:	9207      	str	r2, [sp, #28]
 8002f50:	e014      	b.n	8002f7c <_svfiprintf_r+0x114>
 8002f52:	eba0 0308 	sub.w	r3, r0, r8
 8002f56:	fa09 f303 	lsl.w	r3, r9, r3
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	9304      	str	r3, [sp, #16]
 8002f5e:	46a2      	mov	sl, r4
 8002f60:	e7d2      	b.n	8002f08 <_svfiprintf_r+0xa0>
 8002f62:	9b03      	ldr	r3, [sp, #12]
 8002f64:	1d19      	adds	r1, r3, #4
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	9103      	str	r1, [sp, #12]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	bfbb      	ittet	lt
 8002f6e:	425b      	neglt	r3, r3
 8002f70:	f042 0202 	orrlt.w	r2, r2, #2
 8002f74:	9307      	strge	r3, [sp, #28]
 8002f76:	9307      	strlt	r3, [sp, #28]
 8002f78:	bfb8      	it	lt
 8002f7a:	9204      	strlt	r2, [sp, #16]
 8002f7c:	7823      	ldrb	r3, [r4, #0]
 8002f7e:	2b2e      	cmp	r3, #46	@ 0x2e
 8002f80:	d10a      	bne.n	8002f98 <_svfiprintf_r+0x130>
 8002f82:	7863      	ldrb	r3, [r4, #1]
 8002f84:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f86:	d132      	bne.n	8002fee <_svfiprintf_r+0x186>
 8002f88:	9b03      	ldr	r3, [sp, #12]
 8002f8a:	1d1a      	adds	r2, r3, #4
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	9203      	str	r2, [sp, #12]
 8002f90:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002f94:	3402      	adds	r4, #2
 8002f96:	9305      	str	r3, [sp, #20]
 8002f98:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800305c <_svfiprintf_r+0x1f4>
 8002f9c:	7821      	ldrb	r1, [r4, #0]
 8002f9e:	2203      	movs	r2, #3
 8002fa0:	4650      	mov	r0, sl
 8002fa2:	f7fd f955 	bl	8000250 <memchr>
 8002fa6:	b138      	cbz	r0, 8002fb8 <_svfiprintf_r+0x150>
 8002fa8:	9b04      	ldr	r3, [sp, #16]
 8002faa:	eba0 000a 	sub.w	r0, r0, sl
 8002fae:	2240      	movs	r2, #64	@ 0x40
 8002fb0:	4082      	lsls	r2, r0
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	3401      	adds	r4, #1
 8002fb6:	9304      	str	r3, [sp, #16]
 8002fb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002fbc:	4824      	ldr	r0, [pc, #144]	@ (8003050 <_svfiprintf_r+0x1e8>)
 8002fbe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002fc2:	2206      	movs	r2, #6
 8002fc4:	f7fd f944 	bl	8000250 <memchr>
 8002fc8:	2800      	cmp	r0, #0
 8002fca:	d036      	beq.n	800303a <_svfiprintf_r+0x1d2>
 8002fcc:	4b21      	ldr	r3, [pc, #132]	@ (8003054 <_svfiprintf_r+0x1ec>)
 8002fce:	bb1b      	cbnz	r3, 8003018 <_svfiprintf_r+0x1b0>
 8002fd0:	9b03      	ldr	r3, [sp, #12]
 8002fd2:	3307      	adds	r3, #7
 8002fd4:	f023 0307 	bic.w	r3, r3, #7
 8002fd8:	3308      	adds	r3, #8
 8002fda:	9303      	str	r3, [sp, #12]
 8002fdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002fde:	4433      	add	r3, r6
 8002fe0:	9309      	str	r3, [sp, #36]	@ 0x24
 8002fe2:	e76a      	b.n	8002eba <_svfiprintf_r+0x52>
 8002fe4:	fb0c 3202 	mla	r2, ip, r2, r3
 8002fe8:	460c      	mov	r4, r1
 8002fea:	2001      	movs	r0, #1
 8002fec:	e7a8      	b.n	8002f40 <_svfiprintf_r+0xd8>
 8002fee:	2300      	movs	r3, #0
 8002ff0:	3401      	adds	r4, #1
 8002ff2:	9305      	str	r3, [sp, #20]
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	f04f 0c0a 	mov.w	ip, #10
 8002ffa:	4620      	mov	r0, r4
 8002ffc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003000:	3a30      	subs	r2, #48	@ 0x30
 8003002:	2a09      	cmp	r2, #9
 8003004:	d903      	bls.n	800300e <_svfiprintf_r+0x1a6>
 8003006:	2b00      	cmp	r3, #0
 8003008:	d0c6      	beq.n	8002f98 <_svfiprintf_r+0x130>
 800300a:	9105      	str	r1, [sp, #20]
 800300c:	e7c4      	b.n	8002f98 <_svfiprintf_r+0x130>
 800300e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003012:	4604      	mov	r4, r0
 8003014:	2301      	movs	r3, #1
 8003016:	e7f0      	b.n	8002ffa <_svfiprintf_r+0x192>
 8003018:	ab03      	add	r3, sp, #12
 800301a:	9300      	str	r3, [sp, #0]
 800301c:	462a      	mov	r2, r5
 800301e:	4b0e      	ldr	r3, [pc, #56]	@ (8003058 <_svfiprintf_r+0x1f0>)
 8003020:	a904      	add	r1, sp, #16
 8003022:	4638      	mov	r0, r7
 8003024:	f3af 8000 	nop.w
 8003028:	1c42      	adds	r2, r0, #1
 800302a:	4606      	mov	r6, r0
 800302c:	d1d6      	bne.n	8002fdc <_svfiprintf_r+0x174>
 800302e:	89ab      	ldrh	r3, [r5, #12]
 8003030:	065b      	lsls	r3, r3, #25
 8003032:	f53f af2d 	bmi.w	8002e90 <_svfiprintf_r+0x28>
 8003036:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003038:	e72c      	b.n	8002e94 <_svfiprintf_r+0x2c>
 800303a:	ab03      	add	r3, sp, #12
 800303c:	9300      	str	r3, [sp, #0]
 800303e:	462a      	mov	r2, r5
 8003040:	4b05      	ldr	r3, [pc, #20]	@ (8003058 <_svfiprintf_r+0x1f0>)
 8003042:	a904      	add	r1, sp, #16
 8003044:	4638      	mov	r0, r7
 8003046:	f000 f879 	bl	800313c <_printf_i>
 800304a:	e7ed      	b.n	8003028 <_svfiprintf_r+0x1c0>
 800304c:	08003518 	.word	0x08003518
 8003050:	08003522 	.word	0x08003522
 8003054:	00000000 	.word	0x00000000
 8003058:	08002db1 	.word	0x08002db1
 800305c:	0800351e 	.word	0x0800351e

08003060 <_printf_common>:
 8003060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003064:	4616      	mov	r6, r2
 8003066:	4698      	mov	r8, r3
 8003068:	688a      	ldr	r2, [r1, #8]
 800306a:	690b      	ldr	r3, [r1, #16]
 800306c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003070:	4293      	cmp	r3, r2
 8003072:	bfb8      	it	lt
 8003074:	4613      	movlt	r3, r2
 8003076:	6033      	str	r3, [r6, #0]
 8003078:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800307c:	4607      	mov	r7, r0
 800307e:	460c      	mov	r4, r1
 8003080:	b10a      	cbz	r2, 8003086 <_printf_common+0x26>
 8003082:	3301      	adds	r3, #1
 8003084:	6033      	str	r3, [r6, #0]
 8003086:	6823      	ldr	r3, [r4, #0]
 8003088:	0699      	lsls	r1, r3, #26
 800308a:	bf42      	ittt	mi
 800308c:	6833      	ldrmi	r3, [r6, #0]
 800308e:	3302      	addmi	r3, #2
 8003090:	6033      	strmi	r3, [r6, #0]
 8003092:	6825      	ldr	r5, [r4, #0]
 8003094:	f015 0506 	ands.w	r5, r5, #6
 8003098:	d106      	bne.n	80030a8 <_printf_common+0x48>
 800309a:	f104 0a19 	add.w	sl, r4, #25
 800309e:	68e3      	ldr	r3, [r4, #12]
 80030a0:	6832      	ldr	r2, [r6, #0]
 80030a2:	1a9b      	subs	r3, r3, r2
 80030a4:	42ab      	cmp	r3, r5
 80030a6:	dc26      	bgt.n	80030f6 <_printf_common+0x96>
 80030a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80030ac:	6822      	ldr	r2, [r4, #0]
 80030ae:	3b00      	subs	r3, #0
 80030b0:	bf18      	it	ne
 80030b2:	2301      	movne	r3, #1
 80030b4:	0692      	lsls	r2, r2, #26
 80030b6:	d42b      	bmi.n	8003110 <_printf_common+0xb0>
 80030b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80030bc:	4641      	mov	r1, r8
 80030be:	4638      	mov	r0, r7
 80030c0:	47c8      	blx	r9
 80030c2:	3001      	adds	r0, #1
 80030c4:	d01e      	beq.n	8003104 <_printf_common+0xa4>
 80030c6:	6823      	ldr	r3, [r4, #0]
 80030c8:	6922      	ldr	r2, [r4, #16]
 80030ca:	f003 0306 	and.w	r3, r3, #6
 80030ce:	2b04      	cmp	r3, #4
 80030d0:	bf02      	ittt	eq
 80030d2:	68e5      	ldreq	r5, [r4, #12]
 80030d4:	6833      	ldreq	r3, [r6, #0]
 80030d6:	1aed      	subeq	r5, r5, r3
 80030d8:	68a3      	ldr	r3, [r4, #8]
 80030da:	bf0c      	ite	eq
 80030dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80030e0:	2500      	movne	r5, #0
 80030e2:	4293      	cmp	r3, r2
 80030e4:	bfc4      	itt	gt
 80030e6:	1a9b      	subgt	r3, r3, r2
 80030e8:	18ed      	addgt	r5, r5, r3
 80030ea:	2600      	movs	r6, #0
 80030ec:	341a      	adds	r4, #26
 80030ee:	42b5      	cmp	r5, r6
 80030f0:	d11a      	bne.n	8003128 <_printf_common+0xc8>
 80030f2:	2000      	movs	r0, #0
 80030f4:	e008      	b.n	8003108 <_printf_common+0xa8>
 80030f6:	2301      	movs	r3, #1
 80030f8:	4652      	mov	r2, sl
 80030fa:	4641      	mov	r1, r8
 80030fc:	4638      	mov	r0, r7
 80030fe:	47c8      	blx	r9
 8003100:	3001      	adds	r0, #1
 8003102:	d103      	bne.n	800310c <_printf_common+0xac>
 8003104:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800310c:	3501      	adds	r5, #1
 800310e:	e7c6      	b.n	800309e <_printf_common+0x3e>
 8003110:	18e1      	adds	r1, r4, r3
 8003112:	1c5a      	adds	r2, r3, #1
 8003114:	2030      	movs	r0, #48	@ 0x30
 8003116:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800311a:	4422      	add	r2, r4
 800311c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003120:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003124:	3302      	adds	r3, #2
 8003126:	e7c7      	b.n	80030b8 <_printf_common+0x58>
 8003128:	2301      	movs	r3, #1
 800312a:	4622      	mov	r2, r4
 800312c:	4641      	mov	r1, r8
 800312e:	4638      	mov	r0, r7
 8003130:	47c8      	blx	r9
 8003132:	3001      	adds	r0, #1
 8003134:	d0e6      	beq.n	8003104 <_printf_common+0xa4>
 8003136:	3601      	adds	r6, #1
 8003138:	e7d9      	b.n	80030ee <_printf_common+0x8e>
	...

0800313c <_printf_i>:
 800313c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003140:	7e0f      	ldrb	r7, [r1, #24]
 8003142:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003144:	2f78      	cmp	r7, #120	@ 0x78
 8003146:	4691      	mov	r9, r2
 8003148:	4680      	mov	r8, r0
 800314a:	460c      	mov	r4, r1
 800314c:	469a      	mov	sl, r3
 800314e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003152:	d807      	bhi.n	8003164 <_printf_i+0x28>
 8003154:	2f62      	cmp	r7, #98	@ 0x62
 8003156:	d80a      	bhi.n	800316e <_printf_i+0x32>
 8003158:	2f00      	cmp	r7, #0
 800315a:	f000 80d2 	beq.w	8003302 <_printf_i+0x1c6>
 800315e:	2f58      	cmp	r7, #88	@ 0x58
 8003160:	f000 80b9 	beq.w	80032d6 <_printf_i+0x19a>
 8003164:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003168:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800316c:	e03a      	b.n	80031e4 <_printf_i+0xa8>
 800316e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003172:	2b15      	cmp	r3, #21
 8003174:	d8f6      	bhi.n	8003164 <_printf_i+0x28>
 8003176:	a101      	add	r1, pc, #4	@ (adr r1, 800317c <_printf_i+0x40>)
 8003178:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800317c:	080031d5 	.word	0x080031d5
 8003180:	080031e9 	.word	0x080031e9
 8003184:	08003165 	.word	0x08003165
 8003188:	08003165 	.word	0x08003165
 800318c:	08003165 	.word	0x08003165
 8003190:	08003165 	.word	0x08003165
 8003194:	080031e9 	.word	0x080031e9
 8003198:	08003165 	.word	0x08003165
 800319c:	08003165 	.word	0x08003165
 80031a0:	08003165 	.word	0x08003165
 80031a4:	08003165 	.word	0x08003165
 80031a8:	080032e9 	.word	0x080032e9
 80031ac:	08003213 	.word	0x08003213
 80031b0:	080032a3 	.word	0x080032a3
 80031b4:	08003165 	.word	0x08003165
 80031b8:	08003165 	.word	0x08003165
 80031bc:	0800330b 	.word	0x0800330b
 80031c0:	08003165 	.word	0x08003165
 80031c4:	08003213 	.word	0x08003213
 80031c8:	08003165 	.word	0x08003165
 80031cc:	08003165 	.word	0x08003165
 80031d0:	080032ab 	.word	0x080032ab
 80031d4:	6833      	ldr	r3, [r6, #0]
 80031d6:	1d1a      	adds	r2, r3, #4
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	6032      	str	r2, [r6, #0]
 80031dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80031e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80031e4:	2301      	movs	r3, #1
 80031e6:	e09d      	b.n	8003324 <_printf_i+0x1e8>
 80031e8:	6833      	ldr	r3, [r6, #0]
 80031ea:	6820      	ldr	r0, [r4, #0]
 80031ec:	1d19      	adds	r1, r3, #4
 80031ee:	6031      	str	r1, [r6, #0]
 80031f0:	0606      	lsls	r6, r0, #24
 80031f2:	d501      	bpl.n	80031f8 <_printf_i+0xbc>
 80031f4:	681d      	ldr	r5, [r3, #0]
 80031f6:	e003      	b.n	8003200 <_printf_i+0xc4>
 80031f8:	0645      	lsls	r5, r0, #25
 80031fa:	d5fb      	bpl.n	80031f4 <_printf_i+0xb8>
 80031fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003200:	2d00      	cmp	r5, #0
 8003202:	da03      	bge.n	800320c <_printf_i+0xd0>
 8003204:	232d      	movs	r3, #45	@ 0x2d
 8003206:	426d      	negs	r5, r5
 8003208:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800320c:	4859      	ldr	r0, [pc, #356]	@ (8003374 <_printf_i+0x238>)
 800320e:	230a      	movs	r3, #10
 8003210:	e011      	b.n	8003236 <_printf_i+0xfa>
 8003212:	6821      	ldr	r1, [r4, #0]
 8003214:	6833      	ldr	r3, [r6, #0]
 8003216:	0608      	lsls	r0, r1, #24
 8003218:	f853 5b04 	ldr.w	r5, [r3], #4
 800321c:	d402      	bmi.n	8003224 <_printf_i+0xe8>
 800321e:	0649      	lsls	r1, r1, #25
 8003220:	bf48      	it	mi
 8003222:	b2ad      	uxthmi	r5, r5
 8003224:	2f6f      	cmp	r7, #111	@ 0x6f
 8003226:	4853      	ldr	r0, [pc, #332]	@ (8003374 <_printf_i+0x238>)
 8003228:	6033      	str	r3, [r6, #0]
 800322a:	bf14      	ite	ne
 800322c:	230a      	movne	r3, #10
 800322e:	2308      	moveq	r3, #8
 8003230:	2100      	movs	r1, #0
 8003232:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003236:	6866      	ldr	r6, [r4, #4]
 8003238:	60a6      	str	r6, [r4, #8]
 800323a:	2e00      	cmp	r6, #0
 800323c:	bfa2      	ittt	ge
 800323e:	6821      	ldrge	r1, [r4, #0]
 8003240:	f021 0104 	bicge.w	r1, r1, #4
 8003244:	6021      	strge	r1, [r4, #0]
 8003246:	b90d      	cbnz	r5, 800324c <_printf_i+0x110>
 8003248:	2e00      	cmp	r6, #0
 800324a:	d04b      	beq.n	80032e4 <_printf_i+0x1a8>
 800324c:	4616      	mov	r6, r2
 800324e:	fbb5 f1f3 	udiv	r1, r5, r3
 8003252:	fb03 5711 	mls	r7, r3, r1, r5
 8003256:	5dc7      	ldrb	r7, [r0, r7]
 8003258:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800325c:	462f      	mov	r7, r5
 800325e:	42bb      	cmp	r3, r7
 8003260:	460d      	mov	r5, r1
 8003262:	d9f4      	bls.n	800324e <_printf_i+0x112>
 8003264:	2b08      	cmp	r3, #8
 8003266:	d10b      	bne.n	8003280 <_printf_i+0x144>
 8003268:	6823      	ldr	r3, [r4, #0]
 800326a:	07df      	lsls	r7, r3, #31
 800326c:	d508      	bpl.n	8003280 <_printf_i+0x144>
 800326e:	6923      	ldr	r3, [r4, #16]
 8003270:	6861      	ldr	r1, [r4, #4]
 8003272:	4299      	cmp	r1, r3
 8003274:	bfde      	ittt	le
 8003276:	2330      	movle	r3, #48	@ 0x30
 8003278:	f806 3c01 	strble.w	r3, [r6, #-1]
 800327c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003280:	1b92      	subs	r2, r2, r6
 8003282:	6122      	str	r2, [r4, #16]
 8003284:	f8cd a000 	str.w	sl, [sp]
 8003288:	464b      	mov	r3, r9
 800328a:	aa03      	add	r2, sp, #12
 800328c:	4621      	mov	r1, r4
 800328e:	4640      	mov	r0, r8
 8003290:	f7ff fee6 	bl	8003060 <_printf_common>
 8003294:	3001      	adds	r0, #1
 8003296:	d14a      	bne.n	800332e <_printf_i+0x1f2>
 8003298:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800329c:	b004      	add	sp, #16
 800329e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032a2:	6823      	ldr	r3, [r4, #0]
 80032a4:	f043 0320 	orr.w	r3, r3, #32
 80032a8:	6023      	str	r3, [r4, #0]
 80032aa:	4833      	ldr	r0, [pc, #204]	@ (8003378 <_printf_i+0x23c>)
 80032ac:	2778      	movs	r7, #120	@ 0x78
 80032ae:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80032b2:	6823      	ldr	r3, [r4, #0]
 80032b4:	6831      	ldr	r1, [r6, #0]
 80032b6:	061f      	lsls	r7, r3, #24
 80032b8:	f851 5b04 	ldr.w	r5, [r1], #4
 80032bc:	d402      	bmi.n	80032c4 <_printf_i+0x188>
 80032be:	065f      	lsls	r7, r3, #25
 80032c0:	bf48      	it	mi
 80032c2:	b2ad      	uxthmi	r5, r5
 80032c4:	6031      	str	r1, [r6, #0]
 80032c6:	07d9      	lsls	r1, r3, #31
 80032c8:	bf44      	itt	mi
 80032ca:	f043 0320 	orrmi.w	r3, r3, #32
 80032ce:	6023      	strmi	r3, [r4, #0]
 80032d0:	b11d      	cbz	r5, 80032da <_printf_i+0x19e>
 80032d2:	2310      	movs	r3, #16
 80032d4:	e7ac      	b.n	8003230 <_printf_i+0xf4>
 80032d6:	4827      	ldr	r0, [pc, #156]	@ (8003374 <_printf_i+0x238>)
 80032d8:	e7e9      	b.n	80032ae <_printf_i+0x172>
 80032da:	6823      	ldr	r3, [r4, #0]
 80032dc:	f023 0320 	bic.w	r3, r3, #32
 80032e0:	6023      	str	r3, [r4, #0]
 80032e2:	e7f6      	b.n	80032d2 <_printf_i+0x196>
 80032e4:	4616      	mov	r6, r2
 80032e6:	e7bd      	b.n	8003264 <_printf_i+0x128>
 80032e8:	6833      	ldr	r3, [r6, #0]
 80032ea:	6825      	ldr	r5, [r4, #0]
 80032ec:	6961      	ldr	r1, [r4, #20]
 80032ee:	1d18      	adds	r0, r3, #4
 80032f0:	6030      	str	r0, [r6, #0]
 80032f2:	062e      	lsls	r6, r5, #24
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	d501      	bpl.n	80032fc <_printf_i+0x1c0>
 80032f8:	6019      	str	r1, [r3, #0]
 80032fa:	e002      	b.n	8003302 <_printf_i+0x1c6>
 80032fc:	0668      	lsls	r0, r5, #25
 80032fe:	d5fb      	bpl.n	80032f8 <_printf_i+0x1bc>
 8003300:	8019      	strh	r1, [r3, #0]
 8003302:	2300      	movs	r3, #0
 8003304:	6123      	str	r3, [r4, #16]
 8003306:	4616      	mov	r6, r2
 8003308:	e7bc      	b.n	8003284 <_printf_i+0x148>
 800330a:	6833      	ldr	r3, [r6, #0]
 800330c:	1d1a      	adds	r2, r3, #4
 800330e:	6032      	str	r2, [r6, #0]
 8003310:	681e      	ldr	r6, [r3, #0]
 8003312:	6862      	ldr	r2, [r4, #4]
 8003314:	2100      	movs	r1, #0
 8003316:	4630      	mov	r0, r6
 8003318:	f7fc ff9a 	bl	8000250 <memchr>
 800331c:	b108      	cbz	r0, 8003322 <_printf_i+0x1e6>
 800331e:	1b80      	subs	r0, r0, r6
 8003320:	6060      	str	r0, [r4, #4]
 8003322:	6863      	ldr	r3, [r4, #4]
 8003324:	6123      	str	r3, [r4, #16]
 8003326:	2300      	movs	r3, #0
 8003328:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800332c:	e7aa      	b.n	8003284 <_printf_i+0x148>
 800332e:	6923      	ldr	r3, [r4, #16]
 8003330:	4632      	mov	r2, r6
 8003332:	4649      	mov	r1, r9
 8003334:	4640      	mov	r0, r8
 8003336:	47d0      	blx	sl
 8003338:	3001      	adds	r0, #1
 800333a:	d0ad      	beq.n	8003298 <_printf_i+0x15c>
 800333c:	6823      	ldr	r3, [r4, #0]
 800333e:	079b      	lsls	r3, r3, #30
 8003340:	d413      	bmi.n	800336a <_printf_i+0x22e>
 8003342:	68e0      	ldr	r0, [r4, #12]
 8003344:	9b03      	ldr	r3, [sp, #12]
 8003346:	4298      	cmp	r0, r3
 8003348:	bfb8      	it	lt
 800334a:	4618      	movlt	r0, r3
 800334c:	e7a6      	b.n	800329c <_printf_i+0x160>
 800334e:	2301      	movs	r3, #1
 8003350:	4632      	mov	r2, r6
 8003352:	4649      	mov	r1, r9
 8003354:	4640      	mov	r0, r8
 8003356:	47d0      	blx	sl
 8003358:	3001      	adds	r0, #1
 800335a:	d09d      	beq.n	8003298 <_printf_i+0x15c>
 800335c:	3501      	adds	r5, #1
 800335e:	68e3      	ldr	r3, [r4, #12]
 8003360:	9903      	ldr	r1, [sp, #12]
 8003362:	1a5b      	subs	r3, r3, r1
 8003364:	42ab      	cmp	r3, r5
 8003366:	dcf2      	bgt.n	800334e <_printf_i+0x212>
 8003368:	e7eb      	b.n	8003342 <_printf_i+0x206>
 800336a:	2500      	movs	r5, #0
 800336c:	f104 0619 	add.w	r6, r4, #25
 8003370:	e7f5      	b.n	800335e <_printf_i+0x222>
 8003372:	bf00      	nop
 8003374:	08003529 	.word	0x08003529
 8003378:	0800353a 	.word	0x0800353a

0800337c <memmove>:
 800337c:	4288      	cmp	r0, r1
 800337e:	b510      	push	{r4, lr}
 8003380:	eb01 0402 	add.w	r4, r1, r2
 8003384:	d902      	bls.n	800338c <memmove+0x10>
 8003386:	4284      	cmp	r4, r0
 8003388:	4623      	mov	r3, r4
 800338a:	d807      	bhi.n	800339c <memmove+0x20>
 800338c:	1e43      	subs	r3, r0, #1
 800338e:	42a1      	cmp	r1, r4
 8003390:	d008      	beq.n	80033a4 <memmove+0x28>
 8003392:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003396:	f803 2f01 	strb.w	r2, [r3, #1]!
 800339a:	e7f8      	b.n	800338e <memmove+0x12>
 800339c:	4402      	add	r2, r0
 800339e:	4601      	mov	r1, r0
 80033a0:	428a      	cmp	r2, r1
 80033a2:	d100      	bne.n	80033a6 <memmove+0x2a>
 80033a4:	bd10      	pop	{r4, pc}
 80033a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80033aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80033ae:	e7f7      	b.n	80033a0 <memmove+0x24>

080033b0 <_sbrk_r>:
 80033b0:	b538      	push	{r3, r4, r5, lr}
 80033b2:	4d06      	ldr	r5, [pc, #24]	@ (80033cc <_sbrk_r+0x1c>)
 80033b4:	2300      	movs	r3, #0
 80033b6:	4604      	mov	r4, r0
 80033b8:	4608      	mov	r0, r1
 80033ba:	602b      	str	r3, [r5, #0]
 80033bc:	f000 f84c 	bl	8003458 <_sbrk>
 80033c0:	1c43      	adds	r3, r0, #1
 80033c2:	d102      	bne.n	80033ca <_sbrk_r+0x1a>
 80033c4:	682b      	ldr	r3, [r5, #0]
 80033c6:	b103      	cbz	r3, 80033ca <_sbrk_r+0x1a>
 80033c8:	6023      	str	r3, [r4, #0]
 80033ca:	bd38      	pop	{r3, r4, r5, pc}
 80033cc:	200003a8 	.word	0x200003a8

080033d0 <memcpy>:
 80033d0:	440a      	add	r2, r1
 80033d2:	4291      	cmp	r1, r2
 80033d4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80033d8:	d100      	bne.n	80033dc <memcpy+0xc>
 80033da:	4770      	bx	lr
 80033dc:	b510      	push	{r4, lr}
 80033de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80033e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80033e6:	4291      	cmp	r1, r2
 80033e8:	d1f9      	bne.n	80033de <memcpy+0xe>
 80033ea:	bd10      	pop	{r4, pc}

080033ec <_realloc_r>:
 80033ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033f0:	4680      	mov	r8, r0
 80033f2:	4615      	mov	r5, r2
 80033f4:	460c      	mov	r4, r1
 80033f6:	b921      	cbnz	r1, 8003402 <_realloc_r+0x16>
 80033f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80033fc:	4611      	mov	r1, r2
 80033fe:	f7ff bc4b 	b.w	8002c98 <_malloc_r>
 8003402:	b92a      	cbnz	r2, 8003410 <_realloc_r+0x24>
 8003404:	f7ff fbdc 	bl	8002bc0 <_free_r>
 8003408:	2400      	movs	r4, #0
 800340a:	4620      	mov	r0, r4
 800340c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003410:	f000 f81a 	bl	8003448 <_malloc_usable_size_r>
 8003414:	4285      	cmp	r5, r0
 8003416:	4606      	mov	r6, r0
 8003418:	d802      	bhi.n	8003420 <_realloc_r+0x34>
 800341a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800341e:	d8f4      	bhi.n	800340a <_realloc_r+0x1e>
 8003420:	4629      	mov	r1, r5
 8003422:	4640      	mov	r0, r8
 8003424:	f7ff fc38 	bl	8002c98 <_malloc_r>
 8003428:	4607      	mov	r7, r0
 800342a:	2800      	cmp	r0, #0
 800342c:	d0ec      	beq.n	8003408 <_realloc_r+0x1c>
 800342e:	42b5      	cmp	r5, r6
 8003430:	462a      	mov	r2, r5
 8003432:	4621      	mov	r1, r4
 8003434:	bf28      	it	cs
 8003436:	4632      	movcs	r2, r6
 8003438:	f7ff ffca 	bl	80033d0 <memcpy>
 800343c:	4621      	mov	r1, r4
 800343e:	4640      	mov	r0, r8
 8003440:	f7ff fbbe 	bl	8002bc0 <_free_r>
 8003444:	463c      	mov	r4, r7
 8003446:	e7e0      	b.n	800340a <_realloc_r+0x1e>

08003448 <_malloc_usable_size_r>:
 8003448:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800344c:	1f18      	subs	r0, r3, #4
 800344e:	2b00      	cmp	r3, #0
 8003450:	bfbc      	itt	lt
 8003452:	580b      	ldrlt	r3, [r1, r0]
 8003454:	18c0      	addlt	r0, r0, r3
 8003456:	4770      	bx	lr

08003458 <_sbrk>:
 8003458:	4a04      	ldr	r2, [pc, #16]	@ (800346c <_sbrk+0x14>)
 800345a:	6811      	ldr	r1, [r2, #0]
 800345c:	4603      	mov	r3, r0
 800345e:	b909      	cbnz	r1, 8003464 <_sbrk+0xc>
 8003460:	4903      	ldr	r1, [pc, #12]	@ (8003470 <_sbrk+0x18>)
 8003462:	6011      	str	r1, [r2, #0]
 8003464:	6810      	ldr	r0, [r2, #0]
 8003466:	4403      	add	r3, r0
 8003468:	6013      	str	r3, [r2, #0]
 800346a:	4770      	bx	lr
 800346c:	200003b8 	.word	0x200003b8
 8003470:	200003c0 	.word	0x200003c0

08003474 <_init>:
 8003474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003476:	bf00      	nop
 8003478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800347a:	bc08      	pop	{r3}
 800347c:	469e      	mov	lr, r3
 800347e:	4770      	bx	lr

08003480 <_fini>:
 8003480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003482:	bf00      	nop
 8003484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003486:	bc08      	pop	{r3}
 8003488:	469e      	mov	lr, r3
 800348a:	4770      	bx	lr
